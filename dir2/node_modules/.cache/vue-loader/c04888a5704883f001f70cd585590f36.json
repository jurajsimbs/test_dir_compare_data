{"remainingRequest":"C:\\work\\chat-client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\work\\chat-client\\src\\App.vue?vue&type=style&index=0&id=7ba5bd90&lang=scss&scoped=true&","dependencies":[{"path":"C:\\work\\chat-client\\src\\App.vue","mtime":1557776616973},{"path":"C:\\work\\chat-client\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\work\\chat-client\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\work\\chat-client\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\work\\chat-client\\node_modules\\sass-loader\\lib\\loader.js","mtime":1533139052000},{"path":"C:\\work\\chat-client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\chat-client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.drawer-height {\n    margin-top: 64px !important;\n    height: calc(100vh - 64px) !important;\n}\n\n.screen {\n    height: 100vh;\n    overflow-y: hidden;\n}\n\n.toolbar {\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 10;\n}\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0TA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["xn\n<template>\n    <v-app v-if=\"initialized\">\n        <div v-if=\"user\" class=\"screen\">\n            <v-toolbar class=\"toolbar\" color=\"primary\">\n                <v-toolbar-side-icon @click=\"toggleDrawer\"></v-toolbar-side-icon>\n                <v-toolbar-title>Chat client</v-toolbar-title>\n                <v-spacer></v-spacer>\n                <v-menu bottom left>\n                    <template v-slot:activator=\"{ on }\">\n                        <v-btn\n                                icon\n                                v-on=\"on\"\n                        >\n                            <v-icon>more_vert</v-icon>\n                        </v-btn>\n                    </template>\n\n                    <v-list>\n                        <v-list-tile\n                                key=\"logout\"\n                                @click=\"logout\"\n                        >\n                            <v-list-tile-action>\n                                <v-icon>exit_to_app</v-icon>\n                            </v-list-tile-action>\n                            <v-list-tile-title>Logout</v-list-tile-title>\n                        </v-list-tile>\n                    </v-list>\n                </v-menu>\n            </v-toolbar>\n            <v-navigation-drawer\n                    class=\"drawer-height\"\n                    v-model=\"drawer\"\n                    permanent\n                    fixed\n            >\n                <v-toolbar flat class=\"transparent\">\n                    <v-list class=\"pa-0\">\n                        <v-list-tile avatar>\n                            <v-list-tile-avatar>\n                                <img src=\"https://randomuser.me/api/portraits/men/85.jpg\">\n                            </v-list-tile-avatar>\n                            <v-list-tile-content>\n                                <v-list-tile-title>\n                                    <v-list-tile-title>{{user.username}}</v-list-tile-title>\n                                </v-list-tile-title>\n                                <v-list-tile-sub-title>\n                                    {{onlineStatus}}\n                                </v-list-tile-sub-title>\n                            </v-list-tile-content>\n                        </v-list-tile>\n                        <v-divider></v-divider>\n                        <v-list-group\n                                prepend-icon=\"public\"\n                                value=\"true\"\n                        >\n                            <template v-slot:activator>\n                                <v-list-tile>\n                                    <v-list-tile-title>Channels {{channelsCount}}</v-list-tile-title>\n                                </v-list-tile>\n                            </template>\n                            <v-list-tile @click=\"showPublicChannelsPicker\">\n                                <v-list-tile-action>\n                                    Connect to channel...\n                                </v-list-tile-action>\n                            </v-list-tile>\n                            <v-list-tile @click=\"showCreatePrivateGroupDialog\">\n                                <v-list-tile-action>\n                                    Create group...\n                                </v-list-tile-action>\n                            </v-list-tile>\n                            <v-list-tile @click=\"showInviteUserToConversationDialog\">\n                                <v-list-tile-action>\n                                    Invite user to conversation...\n                                </v-list-tile-action>\n                            </v-list-tile>\n                            <v-divider></v-divider>\n                            <template v-if=\"profile && profile.memberOf && profile.memberOf.length > 0\">\n                                <v-list-tile :key=\"channelId\" v-for=\"channelId in profile.memberOf\"\n                                             @click=\"() => openChannel(channelId)\">\n                                    <v-list-tile-action>\n                                        <v-icon v-if=\"channels[channelId] && channels[channelId].type===Channel.TYPE_PUBLIC_GROUP_CHANNEL\">\n                                            public\n                                        </v-icon>\n                                        <v-icon v-if=\"channels[channelId] && channels[channelId].type===Channel.TYPE_PRIVATE_GROUP_CHANNEL\">\n                                            group_work\n                                        </v-icon>\n                                        <v-icon v-if=\"channels[channelId] && channels[channelId].type===Channel.TYPE_PRIVATE_USER_CHANNEL\">\n                                            person\n                                        </v-icon>\n                                    </v-list-tile-action>\n                                    <v-list-tile-content>\n                                        <v-list-tile-title>\n                                            {{(channels &&\n                                            channels[channelId] && channels[channelId].meta)?channels[channelId].meta.name:channelId}}\n                                            {{unreadMessagesCount(channelId)}}\n                                        </v-list-tile-title>\n                                    </v-list-tile-content>\n                                </v-list-tile>\n                            </template>\n                            <v-list-tile v-if=\"profile && profile.memberOf && profile.memberOf.length === 0\">\n                                <v-list-tile-action>\n                                    <v-icon>info</v-icon>\n                                </v-list-tile-action>\n                                <v-list-tile-content>\n                                    <v-list-tile-title>No cahnnels</v-list-tile-title>\n                                    <v-list-tile-sub-title>Not connocted to any channel yet</v-list-tile-sub-title>\n                                </v-list-tile-content>\n                            </v-list-tile>\n                        </v-list-group>\n                    </v-list>\n\n                </v-toolbar>\n            </v-navigation-drawer>\n            <router-view/>\n            <public-channel-picker-dialog :visible=\"publicChannelPickerVisible\" @select=\"connectToPublicChannel\"\n                                          @cancel=\"hidePublicChannelsPicker\"></public-channel-picker-dialog>\n            <create-channel-dialog :visible=\"createPrivateGroupDialogVisible\" @create=\"createPrivateChannel\"\n                                   @cancel=\"hideCreatePrivateGroupDialog\"></create-channel-dialog>\n            <invite-user-to-conversation-dialog :visible=\"inviteUserToConversationDialogVisible\"\n                                                @invite=\"inviteUserToConversation\" @cancel=\"hideInviteUserToConversationDialog\"></invite-user-to-conversation-dialog>\n        </div>\n        <v-container v-if=\"!user\">\n            <v-layout align-center justify-center row fill-height xs12>\n                <v-flex xs3>\n                    <v-card>\n                        <v-card-title>\n                            <v-layout column>\n                                <v-flex>Login</v-flex>\n                                <v-flex>\n                                    <v-text-field v-model=\"username\" prepend-inner-icon=\"person\"\n                                                  label=\"email\"\n                                    ></v-text-field>\n                                </v-flex>\n                                <v-flex>\n                                    <v-text-field v-model=\"password\" type=\"password\"\n                                                  prepend-inner-icon=\"vpn_key\"\n                                                  label=\"password\"\n                                    ></v-text-field>\n                                </v-flex>\n                                <v-flex>\n                                    <v-btn @click=\"login\">Login</v-btn>\n                                </v-flex>\n                            </v-layout>\n                        </v-card-title>\n                    </v-card>\n                </v-flex>\n            </v-layout>\n        </v-container>\n    </v-app>\n</template>\n\n<script>\n    import {channel as Channel} from '@bistudio/chat-constants'\n    import {mapActions, mapGetters} from 'vuex';\n    import CreateChannelDialog from './component/dialog/create-group-channel';\n    import InviteUserToConversationDialog from './component/dialog/create-user-channel';\n    import PublicChannelPickerDialog from './component/dialog/public-channel-picker';\n\n    export default {\n        components: {\n            PublicChannelPickerDialog,\n            CreateChannelDialog,\n            InviteUserToConversationDialog\n        },\n        computed  : {\n            Channel() {\n                return Channel;\n            },\n            ...mapGetters({\n                user       : 'Auth/user',\n                authorized : 'Auth/authorized',\n                initialized: 'Auth/initialized',\n                connected  : 'Socket/connected',\n                profile    : 'Socket/profile',\n                accessToken: 'Auth/accessToken',\n                channels   : 'Socket/channels',\n                socket     : 'Socket/socket'\n            }),\n            onlineStatus() {\n                if (this.authorized && this.initialized && this.connected) {\n                    return 'Online';\n                }\n                return 'Connecting...';\n            },\n            channelsCount() {\n                if (this.profile) {\n                    return `(${this.profile.memberOf.length})`\n                }\n            }\n        },\n        data() {\n            return {\n                publicChannelPickerVisible           : false,\n                createPrivateGroupDialogVisible      : false,\n                inviteUserToConversationDialogVisible: false,\n                username                             : null,\n                password                             : null,\n                drawer                               : false,\n                listening                            : false\n            };\n        },\n        methods   : {\n            ...mapActions({\n                loginUser                     : 'Auth/login',\n                logoutUser                    : 'Auth/logout',\n                initAuth                      : 'Auth/refresh',\n                connectToChannel              : 'Socket/connectToChannel',\n                createAndConnectToChannel     : 'Socket/createAndConnectToChannel',\n                createAndConnectToConversation: 'Socket/createAndConnectToConversation',\n                conversationExists:             'Socket/conversationExists',\n                inviteUserToChannel           : 'Socket/inviteUserToChannel',\n                /** @see SocketStore.createAndConnectToChannel*/\n                connect                       : 'Socket/connect',\n                getChannelInfo                : 'Socket/getChannelInfo', /** @see SocketStore.getChannelInfo */\n                rejectInvitation              : 'Socket/rejectInvitation', /** @see SocketStore.rejectInvitation */\n                acceptInvitation              : 'Socket/acceptInvitation' /** @see SocketStore.acceptInvitation */\n            }),\n            async inviteUserToConversation(userId, invitationMessage) {\n                this.hideInviteUserToConversationDialog();\n                let channelId;\n                let response = await this.conversationExists(userId);\n                if (response.exists) {\n                  channelId = response.channelId;\n                } else {\n                  let channel = await this.createAndConnectToConversation(userId);\n                  channelId = channel.id;\n                }\n                await this.inviteUserToChannel({userId, channelId, text: invitationMessage});\n            },\n            openChannel(channelId) {\n                this.$router.push({name: 'channel', params: {channelId}});\n            },\n            unreadMessagesCount(channelId) {\n\n            },\n            connectToPublicChannel(channelId) {\n                this.hidePublicChannelsPicker();\n                this.connectToChannel(channelId);\n            },\n            async createPrivateChannel(name) {\n                this.hideCreatePrivateGroupDialog();\n                this.createAndConnectToChannel(name);\n\n            },\n            showPublicChannelsPicker() {\n                this.publicChannelPickerVisible = true;\n            },\n            showCreatePrivateGroupDialog() {\n                this.createPrivateGroupDialogVisible = true;\n            },\n            hideCreatePrivateGroupDialog() {\n                this.createPrivateGroupDialogVisible = false;\n            },\n            hidePublicChannelsPicker() {\n                this.publicChannelPickerVisible = false;\n            },\n            showInviteUserToConversationDialog() {\n                this.inviteUserToConversationDialogVisible = true;\n            },\n            hideInviteUserToConversationDialog() {\n                this.inviteUserToConversationDialogVisible = false;\n            },\n            toggleDrawer() {\n                this.drawer = !this.drawer;\n            },\n            login() {\n                console.log('before pass', this.username, this.password);\n                this.loginUser({username: this.username, password: this.password});\n            },\n            logout() {\n                this.logoutUser();\n            },\n            async onChannelInvitationReceived(invitation) {\n                console.log('invitation received', invitation);\n                let agree = await this.$confirm(`Do you want to accept invitation to channel ${invitation.channelName} from user ${invitation.fromUserId}. Additional text: ${invitation.text}`);\n                if (agree) {\n                    let result = await this.acceptInvitation(invitation.id);\n                } else {\n                    let result = await this.rejectInvitation(invitation.id);\n                    console.log('reject result: ', result);\n                }\n            }\n        },\n        watch     : {\n            profile(newProfile) {\n                for (let i = 0; i < newProfile.memberOf.length; i++) {\n                    this.getChannelInfo(newProfile.memberOf[i]);\n                }\n            },\n            connected(isConnected) {\n                if (isConnected & !this.listening) {\n                    this.socket.on('channel-join-invitation', this.onChannelInvitationReceived);\n                    this.listening = true;\n                }\n            }\n        },\n        beforeDestroy() {\n            if (this.listening) {\n                this.socket.off('channel-join-invitation', this.onChannelInvitationReceived);\n            }\n        },\n        async mounted() {\n            await this.initAuth();\n            if (this.connected) {\n                return;\n            }\n            this.connect(this.accessToken);\n        },\n    };\n</script>\n\n<style lang=\"scss\" scoped>\n    .drawer-height {\n        margin-top: 64px !important;\n        height: calc(100vh - 64px) !important;\n    }\n\n    .screen {\n        height: 100vh;\n        overflow-y: hidden;\n    }\n\n    .toolbar {\n        position: absolute;\n        top: 0;\n        left: 0;\n        z-index: 10;\n    }\n</style>\n"]}]}