{"remainingRequest":"C:\\work\\chat-client\\node_modules\\babel-loader\\lib\\index.js!C:\\work\\chat-client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\work\\chat-client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\work\\chat-client\\src\\App.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\work\\chat-client\\src\\App.vue","mtime":1557776616973},{"path":"C:\\work\\chat-client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\chat-client\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\work\\chat-client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\chat-client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\work\\\\chat-client\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"C:\\\\work\\\\chat-client\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { channel as _Channel } from '@bistudio/chat-constants';\nimport { mapActions, mapGetters } from 'vuex';\nimport CreateChannelDialog from './component/dialog/create-group-channel';\nimport InviteUserToConversationDialog from './component/dialog/create-user-channel';\nimport PublicChannelPickerDialog from './component/dialog/public-channel-picker';\nexport default {\n  components: {\n    PublicChannelPickerDialog: PublicChannelPickerDialog,\n    CreateChannelDialog: CreateChannelDialog,\n    InviteUserToConversationDialog: InviteUserToConversationDialog\n  },\n  computed: _objectSpread({\n    Channel: function Channel() {\n      return _Channel;\n    }\n  }, mapGetters({\n    user: 'Auth/user',\n    authorized: 'Auth/authorized',\n    initialized: 'Auth/initialized',\n    connected: 'Socket/connected',\n    profile: 'Socket/profile',\n    accessToken: 'Auth/accessToken',\n    channels: 'Socket/channels',\n    socket: 'Socket/socket'\n  }), {\n    onlineStatus: function onlineStatus() {\n      if (this.authorized && this.initialized && this.connected) {\n        return 'Online';\n      }\n\n      return 'Connecting...';\n    },\n    channelsCount: function channelsCount() {\n      if (this.profile) {\n        return \"(\".concat(this.profile.memberOf.length, \")\");\n      }\n    }\n  }),\n  data: function data() {\n    return {\n      publicChannelPickerVisible: false,\n      createPrivateGroupDialogVisible: false,\n      inviteUserToConversationDialogVisible: false,\n      username: null,\n      password: null,\n      drawer: false,\n      listening: false\n    };\n  },\n  methods: _objectSpread({}, mapActions({\n    loginUser: 'Auth/login',\n    logoutUser: 'Auth/logout',\n    initAuth: 'Auth/refresh',\n    connectToChannel: 'Socket/connectToChannel',\n    createAndConnectToChannel: 'Socket/createAndConnectToChannel',\n    createAndConnectToConversation: 'Socket/createAndConnectToConversation',\n    conversationExists: 'Socket/conversationExists',\n    inviteUserToChannel: 'Socket/inviteUserToChannel',\n\n    /** @see SocketStore.createAndConnectToChannel*/\n    connect: 'Socket/connect',\n    getChannelInfo: 'Socket/getChannelInfo',\n\n    /** @see SocketStore.getChannelInfo */\n    rejectInvitation: 'Socket/rejectInvitation',\n\n    /** @see SocketStore.rejectInvitation */\n    acceptInvitation: 'Socket/acceptInvitation'\n    /** @see SocketStore.acceptInvitation */\n\n  }), {\n    inviteUserToConversation: function () {\n      var _inviteUserToConversation = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(userId, invitationMessage) {\n        var channelId, response, channel;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.hideInviteUserToConversationDialog();\n                _context.next = 3;\n                return this.conversationExists(userId);\n\n              case 3:\n                response = _context.sent;\n\n                if (!response.exists) {\n                  _context.next = 8;\n                  break;\n                }\n\n                channelId = response.channelId;\n                _context.next = 12;\n                break;\n\n              case 8:\n                _context.next = 10;\n                return this.createAndConnectToConversation(userId);\n\n              case 10:\n                channel = _context.sent;\n                channelId = channel.id;\n\n              case 12:\n                _context.next = 14;\n                return this.inviteUserToChannel({\n                  userId: userId,\n                  channelId: channelId,\n                  text: invitationMessage\n                });\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function inviteUserToConversation(_x, _x2) {\n        return _inviteUserToConversation.apply(this, arguments);\n      }\n\n      return inviteUserToConversation;\n    }(),\n    openChannel: function openChannel(channelId) {\n      this.$router.push({\n        name: 'channel',\n        params: {\n          channelId: channelId\n        }\n      });\n    },\n    unreadMessagesCount: function unreadMessagesCount(channelId) {},\n    connectToPublicChannel: function connectToPublicChannel(channelId) {\n      this.hidePublicChannelsPicker();\n      this.connectToChannel(channelId);\n    },\n    createPrivateChannel: function () {\n      var _createPrivateChannel = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(name) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.hideCreatePrivateGroupDialog();\n                this.createAndConnectToChannel(name);\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function createPrivateChannel(_x3) {\n        return _createPrivateChannel.apply(this, arguments);\n      }\n\n      return createPrivateChannel;\n    }(),\n    showPublicChannelsPicker: function showPublicChannelsPicker() {\n      this.publicChannelPickerVisible = true;\n    },\n    showCreatePrivateGroupDialog: function showCreatePrivateGroupDialog() {\n      this.createPrivateGroupDialogVisible = true;\n    },\n    hideCreatePrivateGroupDialog: function hideCreatePrivateGroupDialog() {\n      this.createPrivateGroupDialogVisible = false;\n    },\n    hidePublicChannelsPicker: function hidePublicChannelsPicker() {\n      this.publicChannelPickerVisible = false;\n    },\n    showInviteUserToConversationDialog: function showInviteUserToConversationDialog() {\n      this.inviteUserToConversationDialogVisible = true;\n    },\n    hideInviteUserToConversationDialog: function hideInviteUserToConversationDialog() {\n      this.inviteUserToConversationDialogVisible = false;\n    },\n    toggleDrawer: function toggleDrawer() {\n      this.drawer = !this.drawer;\n    },\n    login: function login() {\n      console.log('before pass', this.username, this.password);\n      this.loginUser({\n        username: this.username,\n        password: this.password\n      });\n    },\n    logout: function logout() {\n      this.logoutUser();\n    },\n    onChannelInvitationReceived: function () {\n      var _onChannelInvitationReceived = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3(invitation) {\n        var agree, result, _result;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                console.log('invitation received', invitation);\n                _context3.next = 3;\n                return this.$confirm(\"Do you want to accept invitation to channel \".concat(invitation.channelName, \" from user \").concat(invitation.fromUserId, \". Additional text: \").concat(invitation.text));\n\n              case 3:\n                agree = _context3.sent;\n\n                if (!agree) {\n                  _context3.next = 10;\n                  break;\n                }\n\n                _context3.next = 7;\n                return this.acceptInvitation(invitation.id);\n\n              case 7:\n                result = _context3.sent;\n                _context3.next = 14;\n                break;\n\n              case 10:\n                _context3.next = 12;\n                return this.rejectInvitation(invitation.id);\n\n              case 12:\n                _result = _context3.sent;\n                console.log('reject result: ', _result);\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function onChannelInvitationReceived(_x4) {\n        return _onChannelInvitationReceived.apply(this, arguments);\n      }\n\n      return onChannelInvitationReceived;\n    }()\n  }),\n  watch: {\n    profile: function profile(newProfile) {\n      for (var i = 0; i < newProfile.memberOf.length; i++) {\n        this.getChannelInfo(newProfile.memberOf[i]);\n      }\n    },\n    connected: function connected(isConnected) {\n      if (isConnected & !this.listening) {\n        this.socket.on('channel-join-invitation', this.onChannelInvitationReceived);\n        this.listening = true;\n      }\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.listening) {\n      this.socket.off('channel-join-invitation', this.onChannelInvitationReceived);\n    }\n  },\n  mounted: function () {\n    var _mounted = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee4() {\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this.initAuth();\n\n            case 2:\n              if (!this.connected) {\n                _context4.next = 4;\n                break;\n              }\n\n              return _context4.abrupt(\"return\");\n\n            case 4:\n              this.connect(this.accessToken);\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function mounted() {\n      return _mounted.apply(this, arguments);\n    }\n\n    return mounted;\n  }()\n};",{"version":3,"sources":["App.vue"],"names":[],"mappings":"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","sourcesContent":["xn\n<template>\n    <v-app v-if=\"initialized\">\n        <div v-if=\"user\" class=\"screen\">\n            <v-toolbar class=\"toolbar\" color=\"primary\">\n                <v-toolbar-side-icon @click=\"toggleDrawer\"></v-toolbar-side-icon>\n                <v-toolbar-title>Chat client</v-toolbar-title>\n                <v-spacer></v-spacer>\n                <v-menu bottom left>\n                    <template v-slot:activator=\"{ on }\">\n                        <v-btn\n                                icon\n                                v-on=\"on\"\n                        >\n                            <v-icon>more_vert</v-icon>\n                        </v-btn>\n                    </template>\n\n                    <v-list>\n                        <v-list-tile\n                                key=\"logout\"\n                                @click=\"logout\"\n                        >\n                            <v-list-tile-action>\n                                <v-icon>exit_to_app</v-icon>\n                            </v-list-tile-action>\n                            <v-list-tile-title>Logout</v-list-tile-title>\n                        </v-list-tile>\n                    </v-list>\n                </v-menu>\n            </v-toolbar>\n            <v-navigation-drawer\n                    class=\"drawer-height\"\n                    v-model=\"drawer\"\n                    permanent\n                    fixed\n            >\n                <v-toolbar flat class=\"transparent\">\n                    <v-list class=\"pa-0\">\n                        <v-list-tile avatar>\n                            <v-list-tile-avatar>\n                                <img src=\"https://randomuser.me/api/portraits/men/85.jpg\">\n                            </v-list-tile-avatar>\n                            <v-list-tile-content>\n                                <v-list-tile-title>\n                                    <v-list-tile-title>{{user.username}}</v-list-tile-title>\n                                </v-list-tile-title>\n                                <v-list-tile-sub-title>\n                                    {{onlineStatus}}\n                                </v-list-tile-sub-title>\n                            </v-list-tile-content>\n                        </v-list-tile>\n                        <v-divider></v-divider>\n                        <v-list-group\n                                prepend-icon=\"public\"\n                                value=\"true\"\n                        >\n                            <template v-slot:activator>\n                                <v-list-tile>\n                                    <v-list-tile-title>Channels {{channelsCount}}</v-list-tile-title>\n                                </v-list-tile>\n                            </template>\n                            <v-list-tile @click=\"showPublicChannelsPicker\">\n                                <v-list-tile-action>\n                                    Connect to channel...\n                                </v-list-tile-action>\n                            </v-list-tile>\n                            <v-list-tile @click=\"showCreatePrivateGroupDialog\">\n                                <v-list-tile-action>\n                                    Create group...\n                                </v-list-tile-action>\n                            </v-list-tile>\n                            <v-list-tile @click=\"showInviteUserToConversationDialog\">\n                                <v-list-tile-action>\n                                    Invite user to conversation...\n                                </v-list-tile-action>\n                            </v-list-tile>\n                            <v-divider></v-divider>\n                            <template v-if=\"profile && profile.memberOf && profile.memberOf.length > 0\">\n                                <v-list-tile :key=\"channelId\" v-for=\"channelId in profile.memberOf\"\n                                             @click=\"() => openChannel(channelId)\">\n                                    <v-list-tile-action>\n                                        <v-icon v-if=\"channels[channelId] && channels[channelId].type===Channel.TYPE_PUBLIC_GROUP_CHANNEL\">\n                                            public\n                                        </v-icon>\n                                        <v-icon v-if=\"channels[channelId] && channels[channelId].type===Channel.TYPE_PRIVATE_GROUP_CHANNEL\">\n                                            group_work\n                                        </v-icon>\n                                        <v-icon v-if=\"channels[channelId] && channels[channelId].type===Channel.TYPE_PRIVATE_USER_CHANNEL\">\n                                            person\n                                        </v-icon>\n                                    </v-list-tile-action>\n                                    <v-list-tile-content>\n                                        <v-list-tile-title>\n                                            {{(channels &&\n                                            channels[channelId] && channels[channelId].meta)?channels[channelId].meta.name:channelId}}\n                                            {{unreadMessagesCount(channelId)}}\n                                        </v-list-tile-title>\n                                    </v-list-tile-content>\n                                </v-list-tile>\n                            </template>\n                            <v-list-tile v-if=\"profile && profile.memberOf && profile.memberOf.length === 0\">\n                                <v-list-tile-action>\n                                    <v-icon>info</v-icon>\n                                </v-list-tile-action>\n                                <v-list-tile-content>\n                                    <v-list-tile-title>No cahnnels</v-list-tile-title>\n                                    <v-list-tile-sub-title>Not connocted to any channel yet</v-list-tile-sub-title>\n                                </v-list-tile-content>\n                            </v-list-tile>\n                        </v-list-group>\n                    </v-list>\n\n                </v-toolbar>\n            </v-navigation-drawer>\n            <router-view/>\n            <public-channel-picker-dialog :visible=\"publicChannelPickerVisible\" @select=\"connectToPublicChannel\"\n                                          @cancel=\"hidePublicChannelsPicker\"></public-channel-picker-dialog>\n            <create-channel-dialog :visible=\"createPrivateGroupDialogVisible\" @create=\"createPrivateChannel\"\n                                   @cancel=\"hideCreatePrivateGroupDialog\"></create-channel-dialog>\n            <invite-user-to-conversation-dialog :visible=\"inviteUserToConversationDialogVisible\"\n                                                @invite=\"inviteUserToConversation\" @cancel=\"hideInviteUserToConversationDialog\"></invite-user-to-conversation-dialog>\n        </div>\n        <v-container v-if=\"!user\">\n            <v-layout align-center justify-center row fill-height xs12>\n                <v-flex xs3>\n                    <v-card>\n                        <v-card-title>\n                            <v-layout column>\n                                <v-flex>Login</v-flex>\n                                <v-flex>\n                                    <v-text-field v-model=\"username\" prepend-inner-icon=\"person\"\n                                                  label=\"email\"\n                                    ></v-text-field>\n                                </v-flex>\n                                <v-flex>\n                                    <v-text-field v-model=\"password\" type=\"password\"\n                                                  prepend-inner-icon=\"vpn_key\"\n                                                  label=\"password\"\n                                    ></v-text-field>\n                                </v-flex>\n                                <v-flex>\n                                    <v-btn @click=\"login\">Login</v-btn>\n                                </v-flex>\n                            </v-layout>\n                        </v-card-title>\n                    </v-card>\n                </v-flex>\n            </v-layout>\n        </v-container>\n    </v-app>\n</template>\n\n<script>\n    import {channel as Channel} from '@bistudio/chat-constants'\n    import {mapActions, mapGetters} from 'vuex';\n    import CreateChannelDialog from './component/dialog/create-group-channel';\n    import InviteUserToConversationDialog from './component/dialog/create-user-channel';\n    import PublicChannelPickerDialog from './component/dialog/public-channel-picker';\n\n    export default {\n        components: {\n            PublicChannelPickerDialog,\n            CreateChannelDialog,\n            InviteUserToConversationDialog\n        },\n        computed  : {\n            Channel() {\n                return Channel;\n            },\n            ...mapGetters({\n                user       : 'Auth/user',\n                authorized : 'Auth/authorized',\n                initialized: 'Auth/initialized',\n                connected  : 'Socket/connected',\n                profile    : 'Socket/profile',\n                accessToken: 'Auth/accessToken',\n                channels   : 'Socket/channels',\n                socket     : 'Socket/socket'\n            }),\n            onlineStatus() {\n                if (this.authorized && this.initialized && this.connected) {\n                    return 'Online';\n                }\n                return 'Connecting...';\n            },\n            channelsCount() {\n                if (this.profile) {\n                    return `(${this.profile.memberOf.length})`\n                }\n            }\n        },\n        data() {\n            return {\n                publicChannelPickerVisible           : false,\n                createPrivateGroupDialogVisible      : false,\n                inviteUserToConversationDialogVisible: false,\n                username                             : null,\n                password                             : null,\n                drawer                               : false,\n                listening                            : false\n            };\n        },\n        methods   : {\n            ...mapActions({\n                loginUser                     : 'Auth/login',\n                logoutUser                    : 'Auth/logout',\n                initAuth                      : 'Auth/refresh',\n                connectToChannel              : 'Socket/connectToChannel',\n                createAndConnectToChannel     : 'Socket/createAndConnectToChannel',\n                createAndConnectToConversation: 'Socket/createAndConnectToConversation',\n                conversationExists:             'Socket/conversationExists',\n                inviteUserToChannel           : 'Socket/inviteUserToChannel',\n                /** @see SocketStore.createAndConnectToChannel*/\n                connect                       : 'Socket/connect',\n                getChannelInfo                : 'Socket/getChannelInfo', /** @see SocketStore.getChannelInfo */\n                rejectInvitation              : 'Socket/rejectInvitation', /** @see SocketStore.rejectInvitation */\n                acceptInvitation              : 'Socket/acceptInvitation' /** @see SocketStore.acceptInvitation */\n            }),\n            async inviteUserToConversation(userId, invitationMessage) {\n                this.hideInviteUserToConversationDialog();\n                let channelId;\n                let response = await this.conversationExists(userId);\n                if (response.exists) {\n                  channelId = response.channelId;\n                } else {\n                  let channel = await this.createAndConnectToConversation(userId);\n                  channelId = channel.id;\n                }\n                await this.inviteUserToChannel({userId, channelId, text: invitationMessage});\n            },\n            openChannel(channelId) {\n                this.$router.push({name: 'channel', params: {channelId}});\n            },\n            unreadMessagesCount(channelId) {\n\n            },\n            connectToPublicChannel(channelId) {\n                this.hidePublicChannelsPicker();\n                this.connectToChannel(channelId);\n            },\n            async createPrivateChannel(name) {\n                this.hideCreatePrivateGroupDialog();\n                this.createAndConnectToChannel(name);\n\n            },\n            showPublicChannelsPicker() {\n                this.publicChannelPickerVisible = true;\n            },\n            showCreatePrivateGroupDialog() {\n                this.createPrivateGroupDialogVisible = true;\n            },\n            hideCreatePrivateGroupDialog() {\n                this.createPrivateGroupDialogVisible = false;\n            },\n            hidePublicChannelsPicker() {\n                this.publicChannelPickerVisible = false;\n            },\n            showInviteUserToConversationDialog() {\n                this.inviteUserToConversationDialogVisible = true;\n            },\n            hideInviteUserToConversationDialog() {\n                this.inviteUserToConversationDialogVisible = false;\n            },\n            toggleDrawer() {\n                this.drawer = !this.drawer;\n            },\n            login() {\n                console.log('before pass', this.username, this.password);\n                this.loginUser({username: this.username, password: this.password});\n            },\n            logout() {\n                this.logoutUser();\n            },\n            async onChannelInvitationReceived(invitation) {\n                console.log('invitation received', invitation);\n                let agree = await this.$confirm(`Do you want to accept invitation to channel ${invitation.channelName} from user ${invitation.fromUserId}. Additional text: ${invitation.text}`);\n                if (agree) {\n                    let result = await this.acceptInvitation(invitation.id);\n                } else {\n                    let result = await this.rejectInvitation(invitation.id);\n                    console.log('reject result: ', result);\n                }\n            }\n        },\n        watch     : {\n            profile(newProfile) {\n                for (let i = 0; i < newProfile.memberOf.length; i++) {\n                    this.getChannelInfo(newProfile.memberOf[i]);\n                }\n            },\n            connected(isConnected) {\n                if (isConnected & !this.listening) {\n                    this.socket.on('channel-join-invitation', this.onChannelInvitationReceived);\n                    this.listening = true;\n                }\n            }\n        },\n        beforeDestroy() {\n            if (this.listening) {\n                this.socket.off('channel-join-invitation', this.onChannelInvitationReceived);\n            }\n        },\n        async mounted() {\n            await this.initAuth();\n            if (this.connected) {\n                return;\n            }\n            this.connect(this.accessToken);\n        },\n    };\n</script>\n\n<style lang=\"scss\" scoped>\n    .drawer-height {\n        margin-top: 64px !important;\n        height: calc(100vh - 64px) !important;\n    }\n\n    .screen {\n        height: 100vh;\n        overflow-y: hidden;\n    }\n\n    .toolbar {\n        position: absolute;\n        top: 0;\n        left: 0;\n        z-index: 10;\n    }\n</style>\n"],"sourceRoot":"src"}]}