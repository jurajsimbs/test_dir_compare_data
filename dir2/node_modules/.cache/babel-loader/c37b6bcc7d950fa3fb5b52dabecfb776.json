{"remainingRequest":"C:\\work\\chat-client\\node_modules\\babel-loader\\lib\\index.js!C:\\work\\chat-client\\src\\store\\auth.js","dependencies":[{"path":"C:\\work\\chat-client\\src\\store\\auth.js","mtime":1557593021353},{"path":"C:\\work\\chat-client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\chat-client\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\work\\\\chat-client\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nimport httpStatusCodes from \"http-status-codes\";\nimport config from \"../config\";\nexport default {\n  namespaced: true,\n  state: {\n    user: null,\n    authorized: false,\n    initialized: false,\n    accessToken: localStorage.getItem('accessToken') || null,\n    refreshToken: localStorage.getItem('refreshToken') || null\n  },\n  mutations: {\n    logout: function logout(state) {\n      state.user = null;\n      state.accessToken = null;\n      state.refreshToken = null;\n      state.authorized = false;\n      localStorage.setItem('accessToken', null);\n      localStorage.setItem('refreshToken', null);\n    },\n    login: function login(state, _ref) {\n      var user = _ref.user,\n          accessToken = _ref.accessToken,\n          refreshToken = _ref.refreshToken;\n      state.user = user;\n      state.accessToken = accessToken;\n      state.refreshToken = refreshToken;\n      localStorage.setItem('accessToken', state.accessToken);\n      localStorage.setItem('refreshToken', state.refreshToken);\n      state.authorized = true;\n    },\n    initialized: function initialized(state) {\n      state.initialized = true;\n    }\n  },\n  actions: {\n    logout: function logout(_ref2) {\n      var commit = _ref2.commit;\n      commit('logout');\n    },\n    refresh: function () {\n      var _refresh = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(_ref3) {\n        var commit, accesToken, response, _response;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                commit = _ref3.commit;\n                accesToken = localStorage.getItem('accessToken');\n                console.log('Got AT', accesToken, accesToken === null);\n\n                if (accesToken) {\n                  _context.next = 6;\n                  break;\n                }\n\n                commit('initialized');\n                return _context.abrupt(\"return\");\n\n              case 6:\n                console.log('refrewsh!!!!', accesToken);\n                _context.prev = 7;\n                _context.next = 10;\n                return axios({\n                  method: 'get',\n                  url: config.publicUserInfoUrl,\n                  params: {\n                    access_token: accesToken,\n                    client_id: config.client.id\n                  }\n                });\n\n              case 10:\n                response = _context.sent;\n                commit('login', {\n                  user: response.data,\n                  accessToken: localStorage.getItem('accessToken'),\n                  refreshToken: localStorage.getItem('refreshToken')\n                });\n                commit('initialized');\n                _context.next = 36;\n                break;\n\n              case 15:\n                _context.prev = 15;\n                _context.t0 = _context[\"catch\"](7);\n\n                if (!(_context.t0.response && _context.t0.response.status === httpStatusCodes.UNPROCESSABLE_ENTITY)) {\n                  _context.next = 33;\n                  break;\n                }\n\n                _context.prev = 18;\n                _context.next = 21;\n                return axios({\n                  method: 'post',\n                  url: config.publicRefreshTokenUrl,\n                  data: {\n                    client_id: config.client.id,\n                    grant_type: 'refresh_token',\n                    refresh_token: localStorage.getItem('refreshToken')\n                  }\n                });\n\n              case 21:\n                _response = _context.sent;\n                localStorage.setItem('accessToken', _response.data.access_token);\n                localStorage.setItem('refreshToken', _response.data.refresh_token);\n                _context.next = 31;\n                break;\n\n              case 26:\n                _context.prev = 26;\n                _context.t1 = _context[\"catch\"](18);\n                console.error('Unable to refresh auth. Please login again', _context.t1);\n                localStorage.removeItem('accessToken');\n                localStorage.removeItem('refreshToken');\n\n              case 31:\n                _context.next = 36;\n                break;\n\n              case 33:\n                console.error('Unable to get user data! Try refresh', _context.t0.response, _context.t0);\n                localStorage.removeItem('accessToken');\n                localStorage.removeItem('refreshToken');\n\n              case 36:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[7, 15], [18, 26]]);\n      }));\n\n      function refresh(_x) {\n        return _refresh.apply(this, arguments);\n      }\n\n      return refresh;\n    }(),\n    login: function () {\n      var _login = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(_ref4, _ref5) {\n        var commit, username, password, response, code, accessToken, refreshToken;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                commit = _ref4.commit;\n                username = _ref5.username, password = _ref5.password;\n                console.log('login', username, password);\n                _context2.next = 5;\n                return axios({\n                  method: 'post',\n                  url: config.publicGrantCodeUrl,\n                  data: {\n                    response_type: 'code',\n                    client_id: config.client.id,\n                    username: username,\n                    password: password\n                  }\n                });\n\n              case 5:\n                response = _context2.sent;\n                code = response.data.code;\n                console.log('Got code', code, response);\n                _context2.next = 10;\n                return axios({\n                  method: 'post',\n                  url: response.data.exchange_url,\n                  data: {\n                    grant_type: 'authorization_code',\n                    code: code,\n                    client_id: config.client.id\n                  }\n                });\n\n              case 10:\n                response = _context2.sent;\n                accessToken = response.data.access_token;\n                refreshToken = response.data.refresh_token; // todo\n\n                _context2.next = 15;\n                return axios({\n                  method: 'get',\n                  url: config.publicUserInfoUrl,\n                  params: {\n                    access_token: accessToken,\n                    client_id: config.client.id\n                  }\n                });\n\n              case 15:\n                response = _context2.sent;\n                commit('login', {\n                  user: response.data,\n                  accessToken: accessToken,\n                  refreshToken: refreshToken\n                });\n                commit('initialized');\n\n              case 18:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function login(_x2, _x3) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n  },\n  getters: {\n    initialized: function initialized(state) {\n      return state.initialized;\n    },\n    user: function user(state) {\n      return state.user;\n    },\n    authorized: function authorized(state) {\n      return state.authorized;\n    },\n    accessToken: function accessToken(state) {\n      return state.accessToken;\n    }\n  }\n};",{"version":3,"sources":["C:\\work\\chat-client\\src\\store\\auth.js"],"names":["axios","httpStatusCodes","config","namespaced","state","user","authorized","initialized","accessToken","localStorage","getItem","refreshToken","mutations","logout","setItem","login","actions","commit","refresh","accesToken","console","log","method","url","publicUserInfoUrl","params","access_token","client_id","client","id","response","data","status","UNPROCESSABLE_ENTITY","publicRefreshTokenUrl","grant_type","refresh_token","error","removeItem","username","password","publicGrantCodeUrl","response_type","code","exchange_url","getters"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport httpStatusCodes from \"http-status-codes\";\r\nimport config from \"../config\";\r\n\r\nexport default {\r\n    namespaced: true,\r\n    state     : {\r\n        user        : null,\r\n        authorized  : false,\r\n        initialized : false,\r\n        accessToken : localStorage.getItem('accessToken') || null,\r\n        refreshToken: localStorage.getItem('refreshToken') || null,\r\n    },\r\n    mutations : {\r\n        logout(state) {\r\n            state.user = null;\r\n            state.accessToken = null;\r\n            state.refreshToken = null;\r\n            state.authorized = false;\r\n            localStorage.setItem('accessToken', null);\r\n            localStorage.setItem('refreshToken', null);\r\n        },\r\n        login(state, {user, accessToken, refreshToken}) {\r\n            state.user = user;\r\n            state.accessToken = accessToken;\r\n            state.refreshToken = refreshToken;\r\n            localStorage.setItem('accessToken', state.accessToken);\r\n            localStorage.setItem('refreshToken', state.refreshToken);\r\n            state.authorized = true;\r\n        },\r\n        initialized(state) {\r\n            state.initialized = true;\r\n        },\r\n    },\r\n    actions   : {\r\n        logout({commit}) {\r\n            commit('logout');\r\n        },\r\n        async refresh({commit}) {\r\n            const accesToken = localStorage.getItem('accessToken');\r\n            console.log('Got AT', accesToken, accesToken === null);\r\n            if (!accesToken) {\r\n                commit('initialized');\r\n                return;\r\n            }\r\n            console.log('refrewsh!!!!', accesToken);\r\n            try {\r\n                const response = await axios({\r\n                    method: 'get',\r\n                    url   : config.publicUserInfoUrl,\r\n                    params: {\r\n                        access_token: accesToken,\r\n                        client_id   : config.client.id,\r\n                    },\r\n                });\r\n                commit('login', {\r\n                    user        : response.data,\r\n                    accessToken : localStorage.getItem('accessToken'),\r\n                    refreshToken: localStorage.getItem('refreshToken'),\r\n                });\r\n                commit('initialized');\r\n            } catch (e) {\r\n                if (e.response && e.response.status === httpStatusCodes.UNPROCESSABLE_ENTITY) {\r\n                    try {\r\n                        const response = await axios({\r\n                            method: 'post',\r\n                            url   : config.publicRefreshTokenUrl,\r\n                            data  : {\r\n                                client_id    : config.client.id,\r\n                                grant_type   : 'refresh_token',\r\n                                refresh_token: localStorage.getItem('refreshToken'),\r\n                            },\r\n                        });\r\n                        localStorage.setItem('accessToken', response.data.access_token);\r\n                        localStorage.setItem('refreshToken', response.data.refresh_token);\r\n                    } catch (e) {\r\n                        console.error('Unable to refresh auth. Please login again', e);\r\n                        localStorage.removeItem('accessToken');\r\n                        localStorage.removeItem('refreshToken');\r\n                    }\r\n                } else {\r\n                    console.error('Unable to get user data! Try refresh', e.response, e);\r\n                    localStorage.removeItem('accessToken');\r\n                    localStorage.removeItem('refreshToken');\r\n                }\r\n            }\r\n        },\r\n        async login({commit}, {username, password}) {\r\n            console.log('login', username, password);\r\n            let response = await axios({\r\n                method: 'post',\r\n                url   : config.publicGrantCodeUrl,\r\n                data  : {\r\n                    response_type: 'code',\r\n                    client_id    : config.client.id,\r\n                    username,\r\n                    password,\r\n                },\r\n            });\r\n            const {code} = response.data;\r\n            console.log('Got code', code, response);\r\n            response = await axios({\r\n                method: 'post',\r\n                url   : response.data.exchange_url,\r\n                data  : {\r\n                    grant_type: 'authorization_code',\r\n                    code,\r\n                    client_id : config.client.id,\r\n                },\r\n            });\r\n            const accessToken = response.data.access_token;\r\n            const refreshToken = response.data.refresh_token; // todo\r\n            response = await axios({\r\n                method: 'get',\r\n                url   : config.publicUserInfoUrl,\r\n                params: {\r\n                    access_token: accessToken,\r\n                    client_id   : config.client.id,\r\n                },\r\n            });\r\n\r\n            commit('login', {user: response.data, accessToken, refreshToken});\r\n            commit('initialized');\r\n        },\r\n    },\r\n    getters   : {\r\n        initialized(state) {\r\n            return state.initialized;\r\n        },\r\n        user(state) {\r\n            return state.user;\r\n        },\r\n        authorized(state) {\r\n            return state.authorized;\r\n        },\r\n        accessToken(state) {\r\n            return state.accessToken;\r\n        },\r\n    },\r\n};"]}]}