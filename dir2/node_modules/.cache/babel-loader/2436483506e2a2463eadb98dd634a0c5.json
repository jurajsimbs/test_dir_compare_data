{"remainingRequest":"C:\\work\\chat-client\\node_modules\\babel-loader\\lib\\index.js!C:\\work\\chat-client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\work\\chat-client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\work\\chat-client\\src\\views\\channel.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\work\\chat-client\\src\\views\\channel.vue","mtime":1557593021355},{"path":"C:\\work\\chat-client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\chat-client\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\work\\chat-client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\chat-client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _Object$keys from \"C:\\\\work\\\\chat-client\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/object/keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\work\\\\chat-client\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"C:\\\\work\\\\chat-client\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapActions, mapGetters } from 'vuex';\nimport DateWidget from './../component/date-widget';\nimport InviteUserDialog from './../component/dialog/invite-user';\nimport { eventBus } from './../event-bus';\nimport { channel as _Channel } from '@bistudio/chat-constants';\nexport default {\n  components: {\n    DateWidget: DateWidget,\n    InviteUserDialog: InviteUserDialog\n  },\n  data: function data() {\n    return {\n      message: null,\n      messagesBuffer: [],\n      listening: false,\n      channelInfo: null,\n      membersVisible: true,\n      userInviteDialogVisible: false,\n      members: []\n    };\n  },\n  methods: _objectSpread({}, mapActions({\n    leaveChannel: 'Socket/leaveChannel',\n    sendMessage: 'Socket/sendMessage',\n    getChannelInfo: 'Socket/getChannelInfo',\n\n    /** @see SocketStore.getChannelInfo */\n    inviteUserToChannel: 'Socket/inviteUserToChannel',\n\n    /** @see SocketStore.inviteUserToChannel */\n    getUserName: 'User/getInfo'\n  }), {\n    resolveUserName: function () {\n      var _resolveUserName = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(userId) {\n        var data;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.getUserName(userId);\n\n              case 2:\n                data = _context.sent;\n                return _context.abrupt(\"return\", data.username);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function resolveUserName(_x) {\n        return _resolveUserName.apply(this, arguments);\n      }\n\n      return resolveUserName;\n    }(),\n    inviteUser: function inviteUser(_ref) {\n      var userId = _ref.userId,\n          text = _ref.text;\n      this.hideInviteUserDialog();\n      this.inviteUserToChannel({\n        userId: userId,\n        channelId: this.channelId,\n        text: text\n      });\n    },\n    showInviteUserDialog: function showInviteUserDialog() {\n      this.userInviteDialogVisible = true;\n    },\n    hideInviteUserDialog: function hideInviteUserDialog() {\n      this.userInviteDialogVisible = false;\n    },\n    leave: function () {\n      var _leave = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var res;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this.channelInfo.type === 'private_group' && this.profile.ownerOf.includes(this.channelId))) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                _context2.next = 3;\n                return this.$confirm('Do you really want to cancel this private group owned by you? Whole conversation will be destroyed and all members will be forced to leave.');\n\n              case 3:\n                res = _context2.sent;\n                _context2.next = 21;\n                break;\n\n              case 6:\n                if (!(this.channelInfo.type === 'private_group')) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                _context2.next = 9;\n                return this.$confirm('Do you really want to leave this provate group?');\n\n              case 9:\n                res = _context2.sent;\n                _context2.next = 21;\n                break;\n\n              case 12:\n                if (!(this.channelInfo.type === 'public_group')) {\n                  _context2.next = 18;\n                  break;\n                }\n\n                _context2.next = 15;\n                return this.$confirm('Do you really want to leave this channel?');\n\n              case 15:\n                res = _context2.sent;\n                _context2.next = 21;\n                break;\n\n              case 18:\n                _context2.next = 20;\n                return this.$confirm('Do you really want to leave this conversation?');\n\n              case 20:\n                res = _context2.sent;\n\n              case 21:\n                if (res) {\n                  _context2.next = 23;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 23:\n                _context2.next = 25;\n                return this.leaveChannel(this.channelId);\n\n              case 25:\n                this.$router.push({\n                  name: 'home'\n                });\n\n              case 26:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function leave() {\n        return _leave.apply(this, arguments);\n      }\n\n      return leave;\n    }(),\n    onTextAreaKeypress: function () {\n      var _onTextAreaKeypress = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3(evt) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!evt.shiftKey) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 2:\n                this.tryToSendMessage();\n                evt.preventDefault();\n                evt.stopPropagation();\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function onTextAreaKeypress(_x2) {\n        return _onTextAreaKeypress.apply(this, arguments);\n      }\n\n      return onTextAreaKeypress;\n    }(),\n    tryToSendMessage: function () {\n      var _tryToSendMessage = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4() {\n        var message;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.sendMessage({\n                  text: this.message,\n                  targetChannelId: this.channelId\n                });\n\n              case 2:\n                message = _context4.sent;\n                this.messagesBuffer.push(message);\n                this.message = null;\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function tryToSendMessage() {\n        return _tryToSendMessage.apply(this, arguments);\n      }\n\n      return tryToSendMessage;\n    }(),\n    clearMessage: function clearMessage() {\n      this.message = null;\n    },\n    onMessageReceived: function onMessageReceived(message) {\n      var _this = this;\n\n      if (message.targetChannelId === this.channelId) {\n        this.messagesBuffer.push(message);\n\n        if (this.messagesBuffer.length > 200) {\n          this.messagesBuffer.shift();\n        }\n      }\n\n      setTimeout(function () {\n        var container = _this.$el.querySelector(\"#messages-list\");\n\n        container.scrollTop = container.scrollHeight;\n      }, 10);\n    },\n    refreshChannelInfo: function () {\n      var _refreshChannelInfo = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5(channelId) {\n        var members, userIds, i, userData;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.getChannelInfo(channelId);\n\n              case 2:\n                this.channelInfo = _context5.sent;\n\n                if (!(!this.channelInfo || !this.channelInfo.members)) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\");\n\n              case 5:\n                members = [];\n                userIds = _Object$keys(this.channelInfo.members);\n                i = 0;\n\n              case 8:\n                if (!(i < userIds.length)) {\n                  _context5.next = 16;\n                  break;\n                }\n\n                _context5.next = 11;\n                return this.getUserName({\n                  accessToken: this.accessToken,\n                  userId: this.channelInfo.members[userIds[i]].userId\n                });\n\n              case 11:\n                userData = _context5.sent;\n                members.push({\n                  userId: userData.id,\n                  username: userData.username\n                });\n\n              case 13:\n                i++;\n                _context5.next = 8;\n                break;\n\n              case 16:\n                this.members = members;\n\n              case 17:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function refreshChannelInfo(_x3) {\n        return _refreshChannelInfo.apply(this, arguments);\n      }\n\n      return refreshChannelInfo;\n    }(),\n    onChannelUpdateRequested: function onChannelUpdateRequested(newChannelData) {\n      this.refreshChannelInfo(newChannelData.id);\n    },\n    listen: function () {\n      var _listen = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee6() {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (!(!this.socket || !this.connected)) {\n                  _context6.next = 3;\n                  break;\n                }\n\n                setTimeout(function () {\n                  _this2.listen();\n                }, 1000);\n                return _context6.abrupt(\"return\");\n\n              case 3:\n                this.socket.on('message', this.onMessageReceived);\n                eventBus.on(\"channel-\".concat(this.channelId, \"-update\"), this.onChannelUpdateRequested);\n                this.listening = true;\n                this.refreshChannelInfo(this.channelId);\n\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function listen() {\n        return _listen.apply(this, arguments);\n      }\n\n      return listen;\n    }()\n  }),\n  beforeRouteUpdate: function () {\n    var _beforeRouteUpdate = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee7(to, from, next) {\n      return regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              this.messagesBuffer = [];\n              this.members = [];\n              this.refreshChannelInfo(to.params.channelId);\n              next();\n\n            case 4:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    function beforeRouteUpdate(_x4, _x5, _x6) {\n      return _beforeRouteUpdate.apply(this, arguments);\n    }\n\n    return beforeRouteUpdate;\n  }(),\n  computed: _objectSpread({\n    Channel: function Channel() {\n      return _Channel;\n    },\n    channelId: function channelId() {\n      return this.$route.params.channelId;\n    }\n  }, mapGetters({\n    socket: 'Socket/socket',\n    connected: 'Socket/connected',\n    profile: 'Socket/profile',\n    accessToken: 'Auth/accessToken'\n  })),\n  // watch: {\n  //     async channelInfo(newInfo) {\n  //         let members = [];\n  //         for (let i = 0; i < newInfo.length; i++) {\n  //             let userData = await this.getUserName(newInfo[i].userId);\n  //             members.push(userData.username);\n  //         }\n  //         this.members = members;\n  //     }\n  // },\n  mounted: function mounted() {\n    this.messagesBuffer = [];\n    this.listen();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.socket.off('message', this.onMessageReceived);\n    this.listening = false;\n    eventBus.off(\"channel-\".concat(this.channelId, \"-update\"), this.onChannelUpdateRequested);\n  }\n};",{"version":3,"sources":["channel.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <v-layout column class=\"screen\">\r\n        <v-flex>\r\n            <v-toolbar dense flat relative>\r\n                <v-chip label color=\"red\" v-if=\"profile && profile.ownerOf && profile.ownerOf.includes(channelId)\">\r\n                    <v-icon left>face</v-icon>\r\n                    owner\r\n                </v-chip>\r\n                <v-chip label color=\"light-blue\" v-if=\"channelInfo && channelInfo.type===Channel.TYPE_PUBLIC_GROUP_CHANNEL\">\r\n                    <v-icon left>public</v-icon>\r\n                    public\r\n                </v-chip>\r\n                <v-chip label color=\"light-blue\" v-if=\"channelInfo && channelInfo.type===Channel.TYPE_PRIVATE_GROUP_CHANNEL\">\r\n                    <v-icon left>group_work</v-icon>\r\n                    private\r\n                </v-chip>\r\n                <span>Channel {{channelInfo?channelInfo.meta.name:channelId}}</span>\r\n                <v-spacer></v-spacer>\r\n                <v-btn icon>\r\n                    <v-icon>group</v-icon>\r\n                </v-btn>\r\n                <v-btn icon @click=\"leave\">\r\n                    <v-icon>exit_to_app</v-icon>\r\n                </v-btn>\r\n            </v-toolbar>\r\n        </v-flex>\r\n        <v-flex fill-height>\r\n            <v-layout row fill-height class=\"main-content\">\r\n                <v-flex fill-height class=\"messages-list\" id=\"messages-list\">\r\n                    <v-layout column :key=\"message.id\" v-for=\"message in messagesBuffer\">\r\n                        <div :class=\"(message.fromUserId===profile.id?'own-message':'') + ' ' + (!message.fromUserId?'system-message':'')\">\r\n                            <date-widget v-model=\"message.createdAt\"></date-widget>\r\n                            <b>{{message.fromUserId===profile.id?'You':message.fromUserId}}</b> {{message.text}}\r\n                        </div>\r\n                    </v-layout>\r\n                </v-flex>\r\n\r\n                <v-navigation-drawer\r\n                        v-model=\"membersVisible\"\r\n                        right\r\n                >\r\n                    <v-list dense>\r\n                        <v-list-tile>\r\n                            <v-list-tile-action>\r\n                                <v-btn @click=\"showInviteUserDialog\" icon>\r\n                                    <v-icon>person_add</v-icon>\r\n                                </v-btn>\r\n                            </v-list-tile-action>\r\n                        </v-list-tile>\r\n                        <v-divider></v-divider>\r\n                        <v-list-tile :key=\"idx\" v-for=\"(member, idx) in members\">\r\n                            <v-list-tile-content>\r\n                                <v-list-tile-title>{{member.username || member.userId}} {{member.userId === profile.id?'(you)':''}}\r\n                                </v-list-tile-title>\r\n                            </v-list-tile-content>\r\n                        </v-list-tile>\r\n                    </v-list>\r\n                </v-navigation-drawer>\r\n            </v-layout>\r\n        </v-flex>\r\n        <v-flex>\r\n            <v-layout row>\r\n                <v-flex grow>\r\n                    <v-textarea v-model=\"message\" clearable box light rows=\"3\" class=\"message-textarea\"\r\n                                @keypress.esc=\"clearMessage\"\r\n                                @keypress.enter=\"onTextAreaKeypress\"></v-textarea>\r\n                </v-flex>\r\n                <v-flex shrink>\r\n                    <v-btn icon @click=\"tryToSendMessage\">\r\n                        <v-icon>done</v-icon>\r\n                    </v-btn>\r\n                </v-flex>\r\n            </v-layout>\r\n        </v-flex>\r\n        <invite-user-dialog :visible=\"userInviteDialogVisible\" @invite=\"inviteUser\"\r\n                            @cancel=\"hideInviteUserDialog\"></invite-user-dialog>\r\n    </v-layout>\r\n</template>\r\n<script>\r\n    import {mapActions, mapGetters} from 'vuex';\r\n    import DateWidget from './../component/date-widget';\r\n    import InviteUserDialog from './../component/dialog/invite-user';\r\n    import {eventBus} from './../event-bus';\r\n    import {channel as Channel} from '@bistudio/chat-constants'\r\n\r\n    export default {\r\n        components: {\r\n            DateWidget,\r\n            InviteUserDialog\r\n        },\r\n        data() {\r\n            return {\r\n                message                : null,\r\n                messagesBuffer         : [],\r\n                listening              : false,\r\n                channelInfo            : null,\r\n                membersVisible         : true,\r\n                userInviteDialogVisible: false,\r\n                members: [],\r\n            };\r\n        },\r\n        methods   : {\r\n            ...mapActions({\r\n                leaveChannel       : 'Socket/leaveChannel',\r\n                sendMessage        : 'Socket/sendMessage',\r\n                getChannelInfo     : 'Socket/getChannelInfo', /** @see SocketStore.getChannelInfo */\r\n                inviteUserToChannel: 'Socket/inviteUserToChannel', /** @see SocketStore.inviteUserToChannel */\r\n                getUserName        : 'User/getInfo'\r\n            }),\r\n            async resolveUserName(userId) {\r\n                let data = await this.getUserName(userId);\r\n                return data.username;\r\n            },\r\n            inviteUser({userId, text}) {\r\n                this.hideInviteUserDialog();\r\n                this.inviteUserToChannel({userId, channelId: this.channelId, text});\r\n            },\r\n            showInviteUserDialog() {\r\n                this.userInviteDialogVisible = true\r\n            },\r\n            hideInviteUserDialog() {\r\n                this.userInviteDialogVisible = false\r\n            },\r\n            async leave() {\r\n                let res;\r\n                if (this.channelInfo.type === 'private_group' && this.profile.ownerOf.includes(this.channelId)) {\r\n                    res = await this.$confirm('Do you really want to cancel this private group owned by you? Whole conversation will be destroyed and all members will be forced to leave.');\r\n                } else if (this.channelInfo.type === 'private_group') {\r\n                    res = await this.$confirm('Do you really want to leave this provate group?');\r\n                } else if (this.channelInfo.type === 'public_group') {\r\n                    res = await this.$confirm('Do you really want to leave this channel?');\r\n                } else {\r\n                    res = await this.$confirm('Do you really want to leave this conversation?');\r\n                }\r\n                if (!res) {\r\n                    return;\r\n                }\r\n                await this.leaveChannel(this.channelId);\r\n                this.$router.push({name: 'home'});\r\n            },\r\n            async onTextAreaKeypress(evt) {\r\n                if (evt.shiftKey) {\r\n                    return;\r\n                }\r\n                this.tryToSendMessage();\r\n                evt.preventDefault();\r\n                evt.stopPropagation();\r\n            },\r\n            async tryToSendMessage() {\r\n                let message = await this.sendMessage({text: this.message, targetChannelId: this.channelId});\r\n                this.messagesBuffer.push(message);\r\n                this.message = null;\r\n            },\r\n            clearMessage() {\r\n                this.message = null;\r\n            },\r\n            onMessageReceived(message) {\r\n                if (message.targetChannelId === this.channelId) {\r\n                    this.messagesBuffer.push(message);\r\n                    if (this.messagesBuffer.length > 200) {\r\n                        this.messagesBuffer.shift();\r\n                    }\r\n                }\r\n                setTimeout(() => {\r\n                    var container = this.$el.querySelector(\"#messages-list\");\r\n                    container.scrollTop = container.scrollHeight;\r\n                }, 10);\r\n            },\r\n            async refreshChannelInfo(channelId) {\r\n                this.channelInfo = await this.getChannelInfo(channelId);\r\n                if (!this.channelInfo || !this.channelInfo.members) {\r\n                    return;\r\n                }\r\n                let members = [];\r\n                let userIds = Object.keys(this.channelInfo.members);\r\n                for (let i = 0; i < userIds.length; i++) {\r\n                    let userData = await this.getUserName({accessToken: this.accessToken, userId: this.channelInfo.members[userIds[i]].userId});\r\n                    members.push({userId: userData.id, username: userData.username});\r\n                }\r\n                this.members = members;\r\n            },\r\n            onChannelUpdateRequested(newChannelData) {\r\n                this.refreshChannelInfo(newChannelData.id);\r\n            },\r\n            async listen() {\r\n                if (!this.socket || !this.connected) {\r\n                    setTimeout(() => {\r\n                        this.listen()\r\n                    }, 1000);\r\n                    return;\r\n                }\r\n                this.socket.on('message', this.onMessageReceived);\r\n                eventBus.on(`channel-${this.channelId}-update`, this.onChannelUpdateRequested);\r\n                this.listening = true;\r\n                this.refreshChannelInfo(this.channelId);\r\n            }\r\n        },\r\n        async beforeRouteUpdate(to, from, next) {\r\n            this.messagesBuffer = [];\r\n            this.members = [];\r\n            this.refreshChannelInfo(to.params.channelId);\r\n            next();\r\n        },\r\n        computed  : {\r\n            Channel() {\r\n                return Channel;\r\n            },\r\n            channelId() {\r\n                return this.$route.params.channelId;\r\n            },\r\n            ...mapGetters({\r\n                socket   : 'Socket/socket',\r\n                connected: 'Socket/connected',\r\n                profile  : 'Socket/profile',\r\n                accessToken: 'Auth/accessToken',\r\n            }),\r\n            // members() {\r\n            //     if (this.channelInfo && this.channelInfo.members) {\r\n            //         let output = [];\r\n            //         for (let i = 0; i < this.channelInfo.members.length; i++) {\r\n            //             let userData = this.getUserName(this.channelInfo.members[i].userId)\r\n            //         }\r\n            //         return output;\r\n            //     }\r\n            //     return [];\r\n            // }\r\n        },\r\n        // watch: {\r\n        //     async channelInfo(newInfo) {\r\n        //         let members = [];\r\n        //         for (let i = 0; i < newInfo.length; i++) {\r\n        //             let userData = await this.getUserName(newInfo[i].userId);\r\n        //             members.push(userData.username);\r\n        //         }\r\n        //         this.members = members;\r\n        //     }\r\n        // },\r\n        mounted() {\r\n            this.messagesBuffer = [];\r\n            this.listen();\r\n        },\r\n        beforeDestroy() {\r\n            this.socket.off('message', this.onMessageReceived);\r\n            this.listening = false;\r\n            eventBus.off(`channel-${this.channelId}-update`, this.onChannelUpdateRequested);\r\n        },\r\n    };\r\n</script>\r\n<style scoped lang=\"scss\">\r\n    .main-content {\r\n        max-height: calc(100vh - 64px - 48px - 100px)\r\n    }\r\n\r\n    .message-textarea {\r\n        height: 160px;\r\n        max-height: 160px;\r\n\r\n        textarea {\r\n            margin-top: 5px;\r\n        }\r\n    }\r\n\r\n    .screen {\r\n        margin-top: 64px;\r\n        margin-left: 300px;\r\n    }\r\n\r\n    .messages-list {\r\n        margin: 1em;\r\n        overflow-y: auto;\r\n        overflow-x: hidden;\r\n    }\r\n\r\n    .system-message {\r\n        color: gray;\r\n        font-style: italic;\r\n    }\r\n\r\n    .own-message {\r\n        background-color: #fffedd;\r\n    }\r\n</style>\r\n"],"sourceRoot":"src/views"}]}