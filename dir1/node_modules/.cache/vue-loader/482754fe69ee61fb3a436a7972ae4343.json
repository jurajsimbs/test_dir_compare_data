{"remainingRequest":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\work\\bi-admin-vue-new\\src\\demo\\page\\TableDemo.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\work\\bi-admin-vue-new\\src\\demo\\page\\TableDemo.vue","mtime":1552754725276},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport SimpleTableFilterDropdownFilter from './../../components/table/filter/SimpleTableFilterDropdownFilter';\nimport SimpleTableFilterTextFilter from './../../components/table/filter/SimpleTableFilterTextFilter';\nimport TableController from './../../table/controller';\nimport SimpleTableSortOrder from './../../table/sortOrder';\n\nexport default {\n    components: {\n        SimpleTableFilterTextFilter\n    },\n    computed  : {\n        fakeData() {\n            let rows = [];\n            for (let i = 1; i < 150; i++) {\n                rows.push({\n                    id          : i,\n                    name        : 'john' + i,\n                    published   : false,\n                    type        : Math.round(Math.random() * 2 + 1),\n                    published_at: '2017-01-02 11:12:11'\n                });\n            }\n            return rows;\n        },\n        tableController() {\n            let self = this;\n            return new TableController({\n                identifier : 'tableDemo1',\n                rowsPerPage: 10,\n                sortBy     : 'name',\n                sortOrder  : SimpleTableSortOrder.DESCENDING,\n                columns    : [\n                    {\n                        name    : 'id',\n                        title   : 'ID',\n                        align   : 'left',\n                        sortable: false\n                    },\n                    {\n                        name    : 'name',\n                        title   : 'Name',\n                        sortable: true,\n                        optional: true,\n                        align   : 'left'\n                    },\n                    {\n                        name    : 'type',\n                        title   : 'Type',\n                        sortable: true,\n                        optional: true,\n                    },\n                    {\n                        name    : 'published',\n                        title   : 'Published',\n                        align   : 'left',\n                        optional: true,\n                        sortable: true,\n                    },\n                    {\n                        name    : 'published_at',\n                        title   : 'Published at',\n                        align   : 'left',\n                        optional: true,\n                        sortable: true,\n                    }\n                ],\n                filter     : { //AND\n                    text: {\n                        widget      : SimpleTableFilterTextFilter,\n                        fields      : { //OR\n                            name: {\n                                operator: '$like'\n                            },\n                        },\n                        hintText    : this.$t('Start typing a name'),\n                        label       : this.$t('Search'),\n                        visible     : true,\n                        defaultValue: ''\n                    },\n                    type: {\n                        widget           : SimpleTableFilterDropdownFilter,\n                        fields           : { //OR\n                            type: {\n                                operator: '$eq'\n                            },\n                        },\n                        items: async () => {\n                            return [\n                                {text: 'type 1', value: 1},\n                                {text: 'type 2', value: 2}\n                            ]\n                        },\n                        // items            : [\n                        //     {text: 'type 1', value: 1},\n                        //     {text: 'type 2', value: 2}\n                        // ],\n                        hintText         : this.$t('Select a type'),\n                        label            : this.$t('Type'),\n                        visible          : true,\n                        defaultValue     : ''\n                    }\n                },\n            }, {\n                /*\n                fake resource\n                 */\n                get(params) {\n\n                    let filteredRows = self.fakeData;\n                    filteredRows = filteredRows.filter((row) => {\n                        if (params.filter && params.filter.type && params.filter.type.value) {\n                            return row.type === params.filter.type.value;\n                        }\n                        return true;\n                    });\n                    let limitedRows = filteredRows.slice((params.page - 1) * params.rowsPerPage, (params.page - 1) * params.rowsPerPage + params.rowsPerPage);\n\n                    return Promise.resolve(\n                        {\n                            data: {\n                                rows : limitedRows,\n                                count: filteredRows.length,\n                                pages: Math.ceil(filteredRows.length / params.rowsPerPage),\n                                page : params.page\n                            }\n                        }\n                    )\n                }\n            })\n        }\n    },\n    methods   : {\n        confirmDelete() {\n            return this.confirm('Are you sure to delete this item?');\n        }\n    }\n}\n",{"version":3,"sources":["TableDemo.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAkfile":"TableDemo.vue","sourceRoot":"src/demo/page","sourcesContent":["<template>\r\n    <SimplePage>\r\n        <div slot=\"content\">\r\n            <SimpleTableFilter :controller=\"tableController\"></SimpleTableFilter>\r\n            <SimpleTable :controller=\"tableController\">\r\n                <template slot=\"actions\" slot-scope=\"props\">\r\n                    <v-btn title=\"Details\" icon>\r\n                        <v-icon>info_outline</v-icon>\r\n                    </v-btn>\r\n                    <v-btn title=\"Delete\" icon>\r\n                        <v-icon>delete</v-icon>\r\n                    </v-btn>\r\n                </template>\r\n            </SimpleTable>\r\n        </div>\r\n    </SimplePage>\r\n</template>\r\n<script>\r\n    import SimpleTableFilterDropdownFilter from './../../components/table/filter/SimpleTableFilterDropdownFilter';\r\n    import SimpleTableFilterTextFilter from './../../components/table/filter/SimpleTableFilterTextFilter';\r\n    import TableController from './../../table/controller';\r\n    import SimpleTableSortOrder from './../../table/sortOrder';\r\n\r\n    export default {\r\n        components: {\r\n            SimpleTableFilterTextFilter\r\n        },\r\n        computed  : {\r\n            fakeData() {\r\n                let rows = [];\r\n                for (let i = 1; i < 150; i++) {\r\n                    rows.push({\r\n                        id          : i,\r\n                        name        : 'john' + i,\r\n                        published   : false,\r\n                        type        : Math.round(Math.random() * 2 + 1),\r\n                        published_at: '2017-01-02 11:12:11'\r\n                    });\r\n                }\r\n                return rows;\r\n            },\r\n            tableController() {\r\n                let self = this;\r\n                return new TableController({\r\n                    identifier : 'tableDemo1',\r\n                    rowsPerPage: 10,\r\n                    sortBy     : 'name',\r\n                    sortOrder  : SimpleTableSortOrder.DESCENDING,\r\n                    columns    : [\r\n                        {\r\n                            name    : 'id',\r\n                            title   : 'ID',\r\n                            align   : 'left',\r\n                            sortable: false\r\n                        },\r\n                        {\r\n                            name    : 'name',\r\n                            title   : 'Name',\r\n                            sortable: true,\r\n                            optional: true,\r\n                            align   : 'left'\r\n                        },\r\n                        {\r\n                            name    : 'type',\r\n                            title   : 'Type',\r\n                            sortable: true,\r\n                            optional: true,\r\n                        },\r\n                        {\r\n                            name    : 'published',\r\n                            title   : 'Published',\r\n                            align   : 'left',\r\n                            optional: true,\r\n                            sortable: true,\r\n                        },\r\n                        {\r\n                            name    : 'published_at',\r\n                            title   : 'Published at',\r\n                            align   : 'left',\r\n                            optional: true,\r\n                            sortable: true,\r\n                        }\r\n                    ],\r\n                    filter     : { //AND\r\n                        text: {\r\n                            widget      : SimpleTableFilterTextFilter,\r\n                            fields      : { //OR\r\n                                name: {\r\n                                    operator: '$like'\r\n                                },\r\n                            },\r\n                            hintText    : this.$t('Start typing a name'),\r\n                            label       : this.$t('Search'),\r\n                            visible     : true,\r\n                            defaultValue: ''\r\n                        },\r\n                        type: {\r\n                            widget           : SimpleTableFilterDropdownFilter,\r\n                            fields           : { //OR\r\n                                type: {\r\n                                    operator: '$eq'\r\n                                },\r\n                            },\r\n                            items: async () => {\r\n                                return [\r\n                                    {text: 'type 1', value: 1},\r\n                                    {text: 'type 2', value: 2}\r\n                                ]\r\n                            },\r\n                            // items            : [\r\n                            //     {text: 'type 1', value: 1},\r\n                            //     {text: 'type 2', value: 2}\r\n                            // ],\r\n                            hintText         : this.$t('Select a type'),\r\n                            label            : this.$t('Type'),\r\n                            visible          : true,\r\n                            defaultValue     : ''\r\n                        }\r\n                    },\r\n                }, {\r\n                    /*\r\n                    fake resource\r\n                     */\r\n                    get(params) {\r\n\r\n                        let filteredRows = self.fakeData;\r\n                        filteredRows = filteredRows.filter((row) => {\r\n                            if (params.filter && params.filter.type && params.filter.type.value) {\r\n                                return row.type === params.filter.type.value;\r\n                            }\r\n                            return true;\r\n                        });\r\n                        let limitedRows = filteredRows.slice((params.page - 1) * params.rowsPerPage, (params.page - 1) * params.rowsPerPage + params.rowsPerPage);\r\n\r\n                        return Promise.resolve(\r\n                            {\r\n                                data: {\r\n                                    rows : limitedRows,\r\n                                    count: filteredRows.length,\r\n                                    pages: Math.ceil(filteredRows.length / params.rowsPerPage),\r\n                                    page : params.page\r\n                                }\r\n                            }\r\n                        )\r\n                    }\r\n                })\r\n            }\r\n        },\r\n        methods   : {\r\n            confirmDelete() {\r\n                return this.confirm('Are you sure to delete this item?');\r\n            }\r\n        }\r\n    }\r\n</script>"]}]}