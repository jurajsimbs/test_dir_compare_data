{"remainingRequest":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\work\\bi-admin-vue-new\\src\\components\\editor\\widgets\\giphy\\giphyDialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\work\\bi-admin-vue-new\\src\\components\\editor\\widgets\\giphy\\giphyDialog.vue","mtime":1552754725239},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport documentUtil from './../../../../lib/util/document';\n\nconst pattern = /https?:\\/\\/\\?|media\\.giphy\\.com\\/media\\/([^ /\\n]+)\\/giphy\\.gif|i\\.giphy\\.com\\/([^ /\\n]+)\\.gif|giphy\\.com\\/gifs\\/(?:.*-)?([^ /\\n]+)/i\n\nexport default {\n    data() {\n        return {\n            dialogVisible   : this.visible,\n            giphyId         : this.id,\n            giphyHeight     : this.height,\n            giphyWidth      : this.width,\n            giphyResponsive : this.responsive,\n            giphyUrl        : this.url,\n            pattern\n        }\n    },\n    computed: {\n        valid() {\n            return this.giphyUrl && (this.giphyUrl.length > 0) && (this.giphyUrl.match(pattern)) &&\n                (!(this.giphyHeight && (this.giphyHeight.length > 0)) || (Number.isInteger(Number(this.giphyHeight))) || this.giphyResponsive) &&\n                (!(this.giphyWidth && (this.giphyWidth.length > 0)) || (Number.isInteger(Number(this.giphyWidth))) || this.giphyResponsive);\n        }\n    },\n    methods: {\n        onClosed() {\n            this.$emit('close', 'giphy', null);\n        },\n        onSaved() {\n            let parsedUrl = this.giphyUrl.match(pattern);\n            let id = '';\n            for (var i = 1; i <= 3; i++) {\n                if (parsedUrl[i]) {\n                    id = parsedUrl[i];\n                }\n            }     \n\n            this.$emit('close', 'giphy', {\n                id          : id,\n                height      : this.giphyHeight,\n                width       : this.giphyWidth,\n                responsive  : this.giphyResponsive,\n                url         : this.giphyUrl\n            });\n        }\n    },\n    watch: {\n        visible() {\n            this.dialogVisible = this.visible;\n        },\n        dialogVisible() {\n            if (this.dialogVisible) {\n                this.giphyId            = this.id;\n                this.giphyHeight        = this.height;\n                this.giphyWidth         = this.width;\n                this.giphyResponsive    = this.responsive;\n                this.giphyUrl           = this.url;\n            } else {\n                this.onClosed();\n            }\n        },\n        giphyResponsive() {\n            if (!this.giphyResponsive) {\n                if (!Number.isInteger(Number(this.giphyHeight))) {\n                    this.giphyHeight = '300';\n                }\n                if (!Number.isInteger(Number(this.giphyWidth))) {\n                    this.giphyWidth = '300';\n                }\n            }\n        }\n    },\n    props: {\n        visible     : {\n            type    : Boolean,\n            default : false\n        },\n        newitem     : {\n            type    : Boolean,\n            default : false\n        },\n        id          : {\n            type    : String,\n            default : null\n        },\n        responsive  : {\n            type    : Boolean,\n            default : true\n        },\n        height      : {\n            type    : String,\n            default : '300'\n        },\n        width       : {\n            type    : String,\n            default : '300'\n        },\n        url         : {\n            type    : String,\n            default : null\n        }\n    }\n}\n",{"version":3,"sources":["giphyDialog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"giphyDialog.vue","sourceRoot":"src/components/editor/widgets/giphy","sourcesContent":["<template>\r\n    <div>\r\n        <v-dialog v-model=\"dialogVisible\" max-width=\"390\">\r\n            <v-card>\r\n                <v-card-title>\r\n                    <span class=\"headline\">Giphy</span>\r\n                </v-card-title>\r\n                <v-card-text>\r\n                    <v-alert\r\n                        :value=\"true\"\r\n                        type=\"info\"\r\n                        class=\"alert\"\r\n                    >\r\n                        Please use GIF Link (not Short Link)<br />\r\n                        Go to Giphy site -> Copy link -> GIF Link<br />\r\n                    </v-alert>\r\n                        \r\n                    <br />\r\n                    <v-text-field\r\n                        :label=\"giphyUrl ? 'GIF link' : ''\"\r\n                        placeholder=\"GIF link\"\r\n                        v-model=\"giphyUrl\"\r\n                        required\r\n                        :rules=\"[() => \r\n                            (\r\n                                giphyUrl && \r\n                                (giphyUrl.length > 0) && \r\n                                (giphyUrl.match(pattern) != null)\r\n                            ) || 'Required field, needs to be correct url format']\"\r\n                    ></v-text-field>\r\n                    <v-switch\r\n                        label=\"Responsive\"\r\n                        v-model=\"giphyResponsive\"\r\n                    ></v-switch>\r\n                    <v-text-field\r\n                        :label=\"giphyHeight ? 'Height' : ''\"\r\n                        placeholder=\"Height\"\r\n                        v-show=\"!giphyResponsive\"\r\n                        v-model=\"giphyHeight\"\r\n                        :rules=\"[() => (!(giphyHeight && (giphyHeight.length > 0)) || (Number.isInteger(Number(giphyHeight)))) || 'Must be a whole number']\"\r\n                    ></v-text-field>\r\n                    <v-text-field\r\n                        :label=\"giphyWidth ? 'Width' : ''\"\r\n                        placeholder=\"Width\"\r\n                        v-show=\"!giphyResponsive\"\r\n                        v-model=\"giphyWidth\"\r\n                        :rules=\"[() => (!(giphyWidth && (giphyWidth.length > 0)) || (Number.isInteger(Number(giphyWidth)))) || 'Must be a whole number']\"\r\n                    ></v-text-field>\r\n                </v-card-text>\r\n                <v-card-actions>\r\n                    <v-spacer></v-spacer>\r\n                    <v-btn color=\"blue darken-1\" flat @click.native=\"onClosed\">Close</v-btn>\r\n                    <v-btn color=\"blue darken-1\" flat @click.native=\"onSaved\" v-if=\"valid\">{{ newitem ? 'Add' : 'Save' }}</v-btn>\r\n                    <v-btn color=\"blue darken-1\" flat @click.native=\"onSaved\" v-else disabled>{{ newitem ? 'Add' : 'Save' }}</v-btn>\r\n                </v-card-actions>\r\n            </v-card>\r\n        </v-dialog>\r\n    </div>\r\n</template>\r\n<script>\r\n    import documentUtil from './../../../../lib/util/document';\r\n\r\n    const pattern = /https?:\\/\\/\\?|media\\.giphy\\.com\\/media\\/([^ /\\n]+)\\/giphy\\.gif|i\\.giphy\\.com\\/([^ /\\n]+)\\.gif|giphy\\.com\\/gifs\\/(?:.*-)?([^ /\\n]+)/i\r\n\r\n    export default {\r\n        data() {\r\n            return {\r\n                dialogVisible   : this.visible,\r\n                giphyId         : this.id,\r\n                giphyHeight     : this.height,\r\n                giphyWidth      : this.width,\r\n                giphyResponsive : this.responsive,\r\n                giphyUrl        : this.url,\r\n                pattern\r\n            }\r\n        },\r\n        computed: {\r\n            valid() {\r\n                return this.giphyUrl && (this.giphyUrl.length > 0) && (this.giphyUrl.match(pattern)) &&\r\n                    (!(this.giphyHeight && (this.giphyHeight.length > 0)) || (Number.isInteger(Number(this.giphyHeight))) || this.giphyResponsive) &&\r\n                    (!(this.giphyWidth && (this.giphyWidth.length > 0)) || (Number.isInteger(Number(this.giphyWidth))) || this.giphyResponsive);\r\n            }\r\n        },\r\n        methods: {\r\n            onClosed() {\r\n                this.$emit('close', 'giphy', null);\r\n            },\r\n            onSaved() {\r\n                let parsedUrl = this.giphyUrl.match(pattern);\r\n                let id = '';\r\n                for (var i = 1; i <= 3; i++) {\r\n                    if (parsedUrl[i]) {\r\n                        id = parsedUrl[i];\r\n                    }\r\n                }     \r\n\r\n                this.$emit('close', 'giphy', {\r\n                    id          : id,\r\n                    height      : this.giphyHeight,\r\n                    width       : this.giphyWidth,\r\n                    responsive  : this.giphyResponsive,\r\n                    url         : this.giphyUrl\r\n                });\r\n            }\r\n        },\r\n        watch: {\r\n            visible() {\r\n                this.dialogVisible = this.visible;\r\n            },\r\n            dialogVisible() {\r\n                if (this.dialogVisible) {\r\n                    this.giphyId            = this.id;\r\n                    this.giphyHeight        = this.height;\r\n                    this.giphyWidth         = this.width;\r\n                    this.giphyResponsive    = this.responsive;\r\n                    this.giphyUrl           = this.url;\r\n                } else {\r\n                    this.onClosed();\r\n                }\r\n            },\r\n            giphyResponsive() {\r\n                if (!this.giphyResponsive) {\r\n                    if (!Number.isInteger(Number(this.giphyHeight))) {\r\n                        this.giphyHeight = '300';\r\n                    }\r\n                    if (!Number.isInteger(Number(this.giphyWidth))) {\r\n                        this.giphyWidth = '300';\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        props: {\r\n            visible     : {\r\n                type    : Boolean,\r\n                default : false\r\n            },\r\n            newitem     : {\r\n                type    : Boolean,\r\n                default : false\r\n            },\r\n            id          : {\r\n                type    : String,\r\n                default : null\r\n            },\r\n            responsive  : {\r\n                type    : Boolean,\r\n                default : true\r\n            },\r\n            height      : {\r\n                type    : String,\r\n                default : '300'\r\n            },\r\n            width       : {\r\n                type    : String,\r\n                default : '300'\r\n            },\r\n            url         : {\r\n                type    : String,\r\n                default : null\r\n            }\r\n        }\r\n    }\r\n</script>\r\n"]}]}