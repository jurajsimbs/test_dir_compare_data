{"remainingRequest":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\work\\bi-admin-vue-new\\src\\components\\application\\Sidebar.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\work\\bi-admin-vue-new\\src\\components\\application\\Sidebar.vue","mtime":1552754725219},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport events from '@/app/events';\nimport LocalSettings from '@/app/localSettings';\nimport NavigationList from '@/components/partials/sidebar/NavigationList';\nimport {mapGetters} from 'vuex';\nimport Themes from '../../app/theme';\nimport Environments from '../../const/env';\nimport PermissionHandler from './../../permission/handler';\nimport Env from './../../util/env';\n\nconst log = require('debug')('bi:sidebar');\n\nexport default {\n    name      : 'SinglePageAppRootPanel',\n    components: {NavigationList},\n    data() {\n        return {\n            width              : 250,\n            drawerIsOpen       : true,\n            drawerAlwaysVisible: true\n        }\n    },\n    mounted() {\n        this.appManager.$on(events.DRAWER.CLOSE, this.closeDrawer);\n        this.appManager.$on(events.DRAWER.OPEN, this.openDrawer);\n        this.appManager.$on(events.DRAWER.TOGGLE, this.toggleDrawer);\n        this.appManager.$on(events.DRAWER.ALWAYS_VISIBLE, this.makeDrawerAlwaysVisible);\n    },\n    beforeDestroy() {\n        this.appManager.$off(events.DRAWER.CLOSE, this.closeDrawer);\n        this.appManager.$off(events.DRAWER.OPEN, this.openDrawer);\n    },\n    computed  : {\n        ...mapGetters('settings', {\n            settings: 'settings'\n        }),\n        ...mapGetters('user', {\n            user: 'user'\n        }),\n        themes() {\n            return Themes;\n        },\n        items() {\n            return this.getItems();\n        }\n    },\n    methods   : {\n        isProductionEnv() {\n            return this.settings.environment === Environments.PRODUCTION;\n        },\n        getEnvironmentName() {\n            return Env.getFullName(this.settings.environment);\n        },\n        getItems(routes) {\n            let items = [];\n\n            if (!routes) {\n                routes = this.$router.options.routes;\n            }\n\n            routes.forEach(route => {\n                let item = this.getItem(route);\n\n                let hasPermission = false;\n                if ((item.permission === true || item.permission === undefined)) {\n                    hasPermission = true;\n                } else {\n                    hasPermission = PermissionHandler.check(this.user, item.permission);\n                }\n                if (item && hasPermission) {\n                    items.push(item);\n                }\n            });\n\n            return items;\n        },\n        getItem(route) {\n\n            let item = false;\n\n            if (route.props && route.props.inMenu === true) {\n                item = {\n                    name      : route.props.name,\n                    icon      : route.props.icon,\n                    title     : this.$t(route.props.title),\n                    exact     : route.props.exact,\n                    permission: route.props.permission,\n                }\n\n                if (route.children) {\n                    item.items = this.getItems(route.children);\n\n                    if (\n                        (route.children || !route.children.length) &&\n                        (!item.items || !item.items.lenght) &&\n                        !item.name\n                    ) {\n                        item.name = route.children[0].props.name;\n                    }\n                }\n            }\n\n            return item;\n        },\n        makeDrawerAlwaysVisible(alwaysVisible) {\n            this.drawerAlwaysVisible = alwaysVisible;\n        },\n        isAllowed(permission) {\n\n            return true;\n        },\n        closeDrawer() {\n            if (this.drawerAlwaysVisible) {\n                return;\n            }\n            this.drawerIsOpen = false;\n        },\n        openDrawer() {\n            if (this.drawerAlwaysVisible) {\n                return;\n            }\n            this.drawerIsOpen = true;\n        },\n        toggleDrawer() {\n            this.drawerIsOpen = !this.drawerIsOpen;\n        },\n        close() {\n            this.appManager.$emit(events.DRAWER.CLOSE);\n        }\n    },\n    created() {\n        this.drawerAlwaysVisible = LocalSettings.get('drawerAlwaysVisible');\n    }\n}\n",{"version":3,"sources":["Sidebar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqfile":"Sidebar.vue","sourceRoot":"src/components/application","sourcesContent":["<template>\r\n    <div>\r\n        <v-navigation-drawer app dark fixed>\r\n            <v-toolbar :light=\"this.$vuetify.theme.name===themes.YELLOW.name\"\r\n                       :dark=\"this.$vuetify.theme.name!==themes.YELLOW.name\" color=\"primary\" class=\"main-panel-logo\">\r\n                <v-toolbar-title>Navigation</v-toolbar-title>\r\n            </v-toolbar>\r\n            <template v-if=\"this.settings && this.settings.environment\">\r\n                <v-divider></v-divider>\r\n                <div class=\"infoRow\">\r\n                    <v-icon>{{isProductionEnv()?'warning':'info_outline'}}</v-icon>\r\n                    <span title=\"Environment name\" class=\"envLabel\">{{getEnvironmentName()}}</span>\r\n                </div>\r\n            </template>\r\n            <v-divider></v-divider>\r\n            <NavigationList :items=\"items\"/>\r\n        </v-navigation-drawer>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import events from '@/app/events';\r\n    import LocalSettings from '@/app/localSettings';\r\n    import NavigationList from '@/components/partials/sidebar/NavigationList';\r\n    import {mapGetters} from 'vuex';\r\n    import Themes from '../../app/theme';\r\n    import Environments from '../../const/env';\r\n    import PermissionHandler from './../../permission/handler';\r\n    import Env from './../../util/env';\r\n\r\n    const log = require('debug')('bi:sidebar');\r\n\r\n    export default {\r\n        name      : 'SinglePageAppRootPanel',\r\n        components: {NavigationList},\r\n        data() {\r\n            return {\r\n                width              : 250,\r\n                drawerIsOpen       : true,\r\n                drawerAlwaysVisible: true\r\n            }\r\n        },\r\n        mounted() {\r\n            this.appManager.$on(events.DRAWER.CLOSE, this.closeDrawer);\r\n            this.appManager.$on(events.DRAWER.OPEN, this.openDrawer);\r\n            this.appManager.$on(events.DRAWER.TOGGLE, this.toggleDrawer);\r\n            this.appManager.$on(events.DRAWER.ALWAYS_VISIBLE, this.makeDrawerAlwaysVisible);\r\n        },\r\n        beforeDestroy() {\r\n            this.appManager.$off(events.DRAWER.CLOSE, this.closeDrawer);\r\n            this.appManager.$off(events.DRAWER.OPEN, this.openDrawer);\r\n        },\r\n        computed  : {\r\n            ...mapGetters('settings', {\r\n                settings: 'settings'\r\n            }),\r\n            ...mapGetters('user', {\r\n                user: 'user'\r\n            }),\r\n            themes() {\r\n                return Themes;\r\n            },\r\n            items() {\r\n                return this.getItems();\r\n            }\r\n        },\r\n        methods   : {\r\n            isProductionEnv() {\r\n                return this.settings.environment === Environments.PRODUCTION;\r\n            },\r\n            getEnvironmentName() {\r\n                return Env.getFullName(this.settings.environment);\r\n            },\r\n            getItems(routes) {\r\n                let items = [];\r\n\r\n                if (!routes) {\r\n                    routes = this.$router.options.routes;\r\n                }\r\n\r\n                routes.forEach(route => {\r\n                    let item = this.getItem(route);\r\n\r\n                    let hasPermission = false;\r\n                    if ((item.permission === true || item.permission === undefined)) {\r\n                        hasPermission = true;\r\n                    } else {\r\n                        hasPermission = PermissionHandler.check(this.user, item.permission);\r\n                    }\r\n                    if (item && hasPermission) {\r\n                        items.push(item);\r\n                    }\r\n                });\r\n\r\n                return items;\r\n            },\r\n            getItem(route) {\r\n\r\n                let item = false;\r\n\r\n                if (route.props && route.props.inMenu === true) {\r\n                    item = {\r\n                        name      : route.props.name,\r\n                        icon      : route.props.icon,\r\n                        title     : this.$t(route.props.title),\r\n                        exact     : route.props.exact,\r\n                        permission: route.props.permission,\r\n                    }\r\n\r\n                    if (route.children) {\r\n                        item.items = this.getItems(route.children);\r\n\r\n                        if (\r\n                            (route.children || !route.children.length) &&\r\n                            (!item.items || !item.items.lenght) &&\r\n                            !item.name\r\n                        ) {\r\n                            item.name = route.children[0].props.name;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return item;\r\n            },\r\n            makeDrawerAlwaysVisible(alwaysVisible) {\r\n                this.drawerAlwaysVisible = alwaysVisible;\r\n            },\r\n            isAllowed(permission) {\r\n\r\n                return true;\r\n            },\r\n            closeDrawer() {\r\n                if (this.drawerAlwaysVisible) {\r\n                    return;\r\n                }\r\n                this.drawerIsOpen = false;\r\n            },\r\n            openDrawer() {\r\n                if (this.drawerAlwaysVisible) {\r\n                    return;\r\n                }\r\n                this.drawerIsOpen = true;\r\n            },\r\n            toggleDrawer() {\r\n                this.drawerIsOpen = !this.drawerIsOpen;\r\n            },\r\n            close() {\r\n                this.appManager.$emit(events.DRAWER.CLOSE);\r\n            }\r\n        },\r\n        created() {\r\n            this.drawerAlwaysVisible = LocalSettings.get('drawerAlwaysVisible');\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n    .infoRow {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: flex-start;\r\n        margin: 1em;\r\n        color: white;\r\n    }\r\n\r\n    .main-panel-logo {\r\n        background-position: center;\r\n        background-repeat: no-repeat;\r\n        background-size: contain;\r\n    }\r\n\r\n    .envLabel {\r\n        margin-left: 1em;\r\n    }\r\n</style>"]}]}