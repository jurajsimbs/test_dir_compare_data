{"remainingRequest":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\work\\bi-admin-vue-new\\src\\components\\table\\filter\\SimpleTableFilterDropdownFilter.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\work\\bi-admin-vue-new\\src\\components\\table\\filter\\SimpleTableFilterDropdownFilter.vue","mtime":1552754725265},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n\nconst NO_VALUE = '__no_value__';\nexport default {\n    name    : 'SimpleTableFilterDropdownFilter',\n    data() {\n        return {\n            items        : [],\n            selectedValue: NO_VALUE,\n            selectedName : null\n        }\n    },\n    methods : {\n        clearValue() {\n            this.selectedValue = NO_VALUE;\n            this.selectedName = null;\n            /** @type SimpleTableController */\n            this.controller.loadData();\n        }\n    },\n    async mounted() {\n        let list = [];\n        if (typeof this.configuration.items === \"function\") {\n            list = await Promise.resolve(this.configuration.items());\n        } else {\n            list = this.configuration.items;\n        }\n\n        if (list && list[0] && list[0].value !== NO_VALUE) {\n            list.unshift({\n                text : 'All',\n                value: NO_VALUE\n            });\n        }\n        this.items = list;\n    },\n    computed: {\n        NO_VALUE() {\n            return NO_VALUE;\n        },\n        // items() {\n        //     let list = this.configuration.items;\n        //     if (list && list[0] && list[0].value !== NO_VALUE) {\n        //         list.unshift({\n        //             text : 'All',\n        //             value: NO_VALUE\n        //         });\n        //     }\n        //     return list;\n        // },\n        configuration() {\n            let defaults = {\n                hintText: 'Select'\n            };\n            try {\n                defaults = Object.assign(defaults, this.controller.configuration.filter[this.code]);\n            } catch (e) {\n                console.warn(`Unable to get configuration for filter ${this.code}`);\n            }\n            return defaults;\n        }\n    },\n    props   : {\n        /**\n         * @type SimpleTableController\n         */\n        controller: {\n            type   : Object,\n            default: () => null\n        },\n        code      : {\n            type   : String,\n            default: ''\n        }\n    },\n    watch   : {\n        selectedValue(newValue) {\n            if (newValue === NO_VALUE) {\n                this.controller.clearFilterValue(this.code);\n                this.selectedName = null;\n            } else {\n                this.controller.setFilterValue(this.code, newValue);\n                for (let i = 0; i < this.items.length; i++) {\n                    if (this.items[i].value === newValue) {\n                        this.selectedName = this.items[i].text;\n                    }\n                }\n            }\n            /** @type SimpleTableController */\n            this.controller.loadData();\n        }\n    }\n}\n",{"version":3,"sources":["SimpleTableFilterDropdownFilter.vue"],"names":[],"mappings":";;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SimpleTableFilterDropdownFilter.vue","sourceRoot":"src/components/table/filter","sourcesContent":["<template>\r\n    <div>\r\n        <v-select v-if=\"!selectedValue || selectedValue === NO_VALUE\" :label=\"configuration.hintText\"\r\n                  v-model=\"selectedValue\" :items=\"items\"></v-select>\r\n        <div v-if=\"selectedValue && selectedValue !== NO_VALUE\">{{configuration.label}}:\r\n            <v-chip close @input=\"clearValue\">{{selectedName}}</v-chip>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    const NO_VALUE = '__no_value__';\r\n    export default {\r\n        name    : 'SimpleTableFilterDropdownFilter',\r\n        data() {\r\n            return {\r\n                items        : [],\r\n                selectedValue: NO_VALUE,\r\n                selectedName : null\r\n            }\r\n        },\r\n        methods : {\r\n            clearValue() {\r\n                this.selectedValue = NO_VALUE;\r\n                this.selectedName = null;\r\n                /** @type SimpleTableController */\r\n                this.controller.loadData();\r\n            }\r\n        },\r\n        async mounted() {\r\n            let list = [];\r\n            if (typeof this.configuration.items === \"function\") {\r\n                list = await Promise.resolve(this.configuration.items());\r\n            } else {\r\n                list = this.configuration.items;\r\n            }\r\n\r\n            if (list && list[0] && list[0].value !== NO_VALUE) {\r\n                list.unshift({\r\n                    text : 'All',\r\n                    value: NO_VALUE\r\n                });\r\n            }\r\n            this.items = list;\r\n        },\r\n        computed: {\r\n            NO_VALUE() {\r\n                return NO_VALUE;\r\n            },\r\n            // items() {\r\n            //     let list = this.configuration.items;\r\n            //     if (list && list[0] && list[0].value !== NO_VALUE) {\r\n            //         list.unshift({\r\n            //             text : 'All',\r\n            //             value: NO_VALUE\r\n            //         });\r\n            //     }\r\n            //     return list;\r\n            // },\r\n            configuration() {\r\n                let defaults = {\r\n                    hintText: 'Select'\r\n                };\r\n                try {\r\n                    defaults = Object.assign(defaults, this.controller.configuration.filter[this.code]);\r\n                } catch (e) {\r\n                    console.warn(`Unable to get configuration for filter ${this.code}`);\r\n                }\r\n                return defaults;\r\n            }\r\n        },\r\n        props   : {\r\n            /**\r\n             * @type SimpleTableController\r\n             */\r\n            controller: {\r\n                type   : Object,\r\n                default: () => null\r\n            },\r\n            code      : {\r\n                type   : String,\r\n                default: ''\r\n            }\r\n        },\r\n        watch   : {\r\n            selectedValue(newValue) {\r\n                if (newValue === NO_VALUE) {\r\n                    this.controller.clearFilterValue(this.code);\r\n                    this.selectedName = null;\r\n                } else {\r\n                    this.controller.setFilterValue(this.code, newValue);\r\n                    for (let i = 0; i < this.items.length; i++) {\r\n                        if (this.items[i].value === newValue) {\r\n                            this.selectedName = this.items[i].text;\r\n                        }\r\n                    }\r\n                }\r\n                /** @type SimpleTableController */\r\n                this.controller.loadData();\r\n            }\r\n        }\r\n    }\r\n</script>\r\n<style scoped>\r\n</style>"]}]}