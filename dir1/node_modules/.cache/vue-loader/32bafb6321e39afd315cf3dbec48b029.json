{"remainingRequest":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\work\\bi-admin-vue-new\\src\\components\\editor\\imageBrowser\\imageUploaderDialog.vue?vue&type=style&index=0&id=290ab8be&scoped=true&lang=scss&","dependencies":[{"path":"C:\\work\\bi-admin-vue-new\\src\\components\\editor\\imageBrowser\\imageUploaderDialog.vue","mtime":1552754725228},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\sass-loader\\lib\\loader.js","mtime":1533139052000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.image-picker {\n    z-index: 10000 !important;\n}\n\n.alert {\n    width: 100%;\n}\n",{"version":3,"sources":["imageUploaderDialog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+MA;AACA;AACA;;AAEA;AACA;AACA","file":"imageUploaderDialog.vue","sourceRoot":"src/components/editor/imageBrowser","sourcesContent":["<template>\r\n    <v-dialog\r\n        ref=\"dialog\"\r\n        v-model=\"dialogVisible\"\r\n        content-class=\"image-uploader\"\r\n        min-width=\"90vw\"\r\n        min-height=\"90vh\"\r\n        scrollable\r\n    >\r\n        <v-card>\r\n            <v-toolbar dark color=\"primary\">\r\n                <v-toolbar-title>Image uploader {{ type.toUpperCase() }}</v-toolbar-title>\r\n                <v-spacer></v-spacer>\r\n                <v-btn icon dark @click.native=\"closeDialog\">\r\n                    <v-icon>close</v-icon>\r\n                </v-btn>\r\n            </v-toolbar>\r\n            <v-card-text>\r\n                <v-btn v-if=\"!uploadVisible\" color=\"success\" @click=\"enableUpload\">Upload</v-btn>\r\n                <file-pond\r\n                    v-if=\"uploadVisible\"\r\n                    name=\"file\"\r\n                    ref=\"pond\"\r\n                    label-idle=\"Drop files here...\"\r\n                    allow-multiple=\"false\"\r\n                    accepted-file-types=\"image/jpeg, image/png\"\r\n                    :server=\"uploadUrl\"\r\n                    @processfile=\"onFileUploaded\"\r\n                />\r\n                <SimpleTable :controller=\"tableController\">\r\n                    <template slot=\"actions\" slot-scope=\"props\">\r\n                        <v-btn\r\n                            :color=\"isSelected(props.item) ? 'error' : 'success'\" title=\"Pick\"\r\n                            @click=\"() => { \r\n                                isSelected(props.item) ? removeImage(props.item) : addImage(props.item)\r\n                            }\">\r\n                            {{ isSelected(props.item) ? 'Remove' : 'Add' }}\r\n                        </v-btn>\r\n                    </template>\r\n                </SimpleTable>\r\n            </v-card-text>\r\n\r\n            <v-alert\r\n                :value=\"true\"\r\n                type=\"error\"\r\n                v-if=\"!valid\"\r\n                class=\"alert\"\r\n            >\r\n                At least one image is required\r\n            </v-alert>\r\n\r\n            <v-card-actions>\r\n                <v-btn flat @click=\"closeDialog\">Cancel</v-btn>\r\n                <v-btn color=\"blue darken-1\" flat @click=\"done\" v-if=\"valid\">Finish picking</v-btn>\r\n                <v-btn color=\"blue darken-1\" flat v-else disabled>Finish picking</v-btn>\r\n            </v-card-actions>\r\n        </v-card>\r\n    </v-dialog>\r\n</template>\r\n<script>\r\n    import TableController from '../../../table/controller';\r\n    import SimpleTableSortOrder from '../../../table/sortOrder';\r\n    import SimpleTableFilterTextFilter from '../../table/filter/SimpleTableFilterTextFilter';\r\n    import ImagePreviewTableCellWidget from './previewWidget';\r\n\r\n    // FilePond plugins\r\n    import FilePondPluginFileValidateType from 'filepond-plugin-file-validate-type';\r\n    import FilePondPluginImagePreview from 'filepond-plugin-image-preview';\r\n    import 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.css';\r\n    import 'filepond/dist/filepond.min.css';\r\n    import vueFilePond from 'vue-filepond';\r\n    const FilePond = vueFilePond(FilePondPluginFileValidateType, FilePondPluginImagePreview);\r\n\r\n    export default {\r\n        name        : 'ImageUploaderDialog',\r\n        components  : {\r\n            FilePond\r\n        },\r\n        props       : {\r\n            visible             : {\r\n                type    : Boolean,\r\n                default : false\r\n            },\r\n            images              : {\r\n                type    : Array,\r\n                default : () => {\r\n                    return [];\r\n                }\r\n            },\r\n            imagesListResource  : {\r\n                type    : Object,\r\n                default : () => {\r\n                    null\r\n                }\r\n            },\r\n            uploadUrl           : {\r\n                type    : String\r\n            },\r\n            type                : {\r\n                type    : String,\r\n                default : 'picture'\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                dialogVisible       : this.visible,\r\n                uploaderPickedImages: [],\r\n                uploadVisible       : false\r\n            }\r\n        },\r\n        watch: {\r\n            visible() {\r\n                this.dialogVisible = this.visible;\r\n            },\r\n            dialogVisible() {\r\n                if (this.dialogVisible) {\r\n                    this.uploaderPickedImages = [];\r\n                    this.images.forEach(element => {\r\n                        this.uploaderPickedImages.push(element);\r\n                    });\r\n                } else {\r\n                    this.closeDialog();\r\n                }\r\n            }\r\n        },\r\n        methods : {\r\n            closeDialog() {\r\n                this.$emit('close', this.images);\r\n            },\r\n            done() {\r\n                this.$emit('close', this.uploaderPickedImages);\r\n            },\r\n\r\n            isSelected(image) {\r\n                for (let i = 0; i < this.uploaderPickedImages.length; i++) {\r\n                    if (image.code === this.uploaderPickedImages[i].code) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            },\r\n            \r\n            addImage(image) {\r\n                if (this.type == 'picture') {\r\n                    this.uploaderPickedImages.pop();\r\n                }\r\n                if ((this.type == 'comparsion') && (this.uploaderPickedImages.length > 1)) {\r\n                    this.uploaderPickedImages.pop();\r\n                }\r\n                image.title         = '';\r\n                image.description   = '';\r\n                image.alt           = '';\r\n                image.lightbox      = false;\r\n                this.uploaderPickedImages.push(image);\r\n            },\r\n            removeImage(image) {\r\n                if (this.type != 'picture') {\r\n                    for (let i = 0; i < this.uploaderPickedImages.length; i++) {\r\n                        if (image.code === this.uploaderPickedImages[i].code) {\r\n                            this.uploaderPickedImages.splice(i, 1);\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.uploaderPickedImages.pop();\r\n                }\r\n            },\r\n\r\n            // file pond upload\r\n            enableUpload() {\r\n                this.uploadVisible = true;\r\n            },\r\n            onFileUploaded(err, info) {\r\n                this.$broadcast('success', `File ${info.file.name} uploaded`);\r\n                this.tableController.loadData();\r\n                //and clear uploaded files list after a while\r\n                setTimeout(() => {\r\n                    this.uploadVisible = false;\r\n                }, 2000)\r\n            }\r\n        },\r\n        computed: {\r\n            valid() {\r\n                return (this.uploaderPickedImages.length > 0);\r\n            },\r\n            tableController() {\r\n                return new TableController({\r\n                        identifier : 'image-browser-dialog',\r\n                        rowsPerPage: 5,\r\n                        sortBy     : 'created_at',\r\n                        sortOrder  : SimpleTableSortOrder.DESCENDING,\r\n                        columns    : [\r\n                            {\r\n                                name    : 'code',\r\n                                title   : 'Preview',\r\n                                sortable: false,\r\n                                optional: true,\r\n                                widget  : ImagePreviewTableCellWidget\r\n                            }\r\n                        ]\r\n                    },\r\n                    this.imagesListResource\r\n                )\r\n            }\r\n        }\r\n    }\r\n</script>\r\n<style scoped lang=\"scss\">\r\n    .image-picker {\r\n        z-index: 10000 !important;\r\n    }\r\n    \r\n    .alert {\r\n        width: 100%;\r\n    }\r\n</style>"]}]}