{"remainingRequest":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\work\\bi-admin-vue-new\\src\\components\\editor\\monaco\\Monaco.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\work\\bi-admin-vue-new\\src\\components\\editor\\monaco\\Monaco.vue","mtime":1552754725229},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\n/**\n * copied from some hellish git - but for now it works (with latest version of monaco\n * UMD version is fucked up for now - loader does not work with webpack 3 (only with v.4)\n */\nimport monacoLoader from './MonacoLoader';\n\nexport default {\n    props:    {\n        width:          {type: [String, Number], default: '100%'},\n        height:         {type: [String, Number], default: '100%'},\n        code:           {type: String, default: '// code \\n'},\n        srcPath:        {type: String},\n        language:       {type: String, default: 'javascript'},\n        theme:          {type: String, default: 'vs-dark'}, // vs, hc-black\n        options:        {\n            type: Object, default: () => {\n            }\n        },\n        highlighted:    {\n            type: Array, default: () => [{\n                number: 0,\n                class:  ''\n            }]\n        },\n        changeThrottle: {type: Number, default: 100}\n    },\n    mounted() {\n        this.fetchEditor();\n    },\n    destroyed() {\n        this.destroyMonaco();\n    },\n    computed: {\n        style() {\n            const {width, height} = this;\n            const fixedWidth      = width.toString().indexOf('%') !== -1 ? width : `${width}px`;\n            const fixedHeight     = height.toString().indexOf('%') !== -1 ? height : `${height}px`;\n            return {\n                width:  fixedWidth,\n                height: fixedHeight,\n            };\n        },\n        editorOptions() {\n            return Object.assign({}, this.defaults, this.options, {\n                value:    this.code,\n                language: this.language,\n                theme:    this.theme\n            });\n        }\n    },\n    data() {\n        return {\n            defaults: {\n                selectOnLineNumbers: true,\n                roundedSelection:    false,\n                readOnly:            false,\n                cursorStyle:         'line',\n                automaticLayout:     false,\n                glyphMargin:         true\n            }\n        }\n    },\n    watch:    {\n        highlighted: {\n            handler(lines) {\n                this.highlightLines(lines);\n            },\n            deep: true\n        }\n    },\n    methods:  {\n        debounce(func, wait, immediate) {\n            var timeout;\n            return function () {\n                var context = this, args = arguments;\n                var later   = function () {\n                    timeout = null;\n                    if (!immediate) func.apply(context, args);\n                };\n                var callNow = immediate && !timeout;\n                clearTimeout(timeout);\n                timeout = setTimeout(later, wait);\n                if (callNow) func.apply(context, args);\n            };\n        },\n        highlightLines(lines) {\n            if (!this.editor) {\n                return;\n            }\n            lines.forEach((line) => {\n                const className   = line.class;\n                const highlighted = this.$el.querySelector(`.${className}`);\n\n                if (highlighted) {\n                    highlighted.classList.remove(className);\n                }\n\n                const number = parseInt(line.number);\n                if (!this.editor && number < 1 || isNaN(number)) {\n                    return;\n                }\n\n                const selectedLine = this.$el.querySelector(`.view-lines [linenumber=\"${number}\"]`);\n                if (selectedLine) {\n                    selectedLine.classList.add(className);\n                }\n            });\n        }\n        ,\n        editorHasLoaded(editor, monaco) {\n            this.editor = editor;\n            this.monaco = monaco;\n            this.editor.onDidChangeModelContent(event =>\n                this.codeChangeHandler(editor, event)\n            );\n            this.$emit('mounted', editor);\n        }\n        ,\n        codeChangeHandler: function (editor) {\n\n            if (this.codeChangeEmitter) {\n                this.codeChangeEmitter(editor);\n            } else {\n                this.codeChangeEmitter = this.debounce(\n                    function (editor) {\n                        this.$emit('codeChange', editor);\n                    },\n                    this.changeThrottle\n                );\n                this.codeChangeEmitter(editor);\n            }\n        }\n        ,\n        fetchEditor() {\n            monacoLoader.load(this.srcPath, this.createMonaco);\n        }\n        ,\n        createMonaco() {\n            this.editor = window.monaco.editor.create(this.$el, this.editorOptions);\n            this.editorHasLoaded(this.editor, window.monaco);\n            this.$emit('loaded', this.editor);\n        }\n        ,\n        destroyMonaco() {\n            if (typeof this.editor !== 'undefined') {\n                this.editor.dispose();\n            }\n        }\n    }\n}\n;\n",{"version":3,"sources":["Monaco.vue"],"names":[],"mappings":";;;;;AAKA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Monaco.vue","sourceRoot":"src/components/editor/monaco","sourcesContent":["<template>\r\n    <div :style=\"style\"></div>\r\n</template>\r\n\r\n<script>\r\n    /**\r\n     * copied from some hellish git - but for now it works (with latest version of monaco\r\n     * UMD version is fucked up for now - loader does not work with webpack 3 (only with v.4)\r\n     */\r\n    import monacoLoader from './MonacoLoader';\r\n\r\n    export default {\r\n        props:    {\r\n            width:          {type: [String, Number], default: '100%'},\r\n            height:         {type: [String, Number], default: '100%'},\r\n            code:           {type: String, default: '// code \\n'},\r\n            srcPath:        {type: String},\r\n            language:       {type: String, default: 'javascript'},\r\n            theme:          {type: String, default: 'vs-dark'}, // vs, hc-black\r\n            options:        {\r\n                type: Object, default: () => {\r\n                }\r\n            },\r\n            highlighted:    {\r\n                type: Array, default: () => [{\r\n                    number: 0,\r\n                    class:  ''\r\n                }]\r\n            },\r\n            changeThrottle: {type: Number, default: 100}\r\n        },\r\n        mounted() {\r\n            this.fetchEditor();\r\n        },\r\n        destroyed() {\r\n            this.destroyMonaco();\r\n        },\r\n        computed: {\r\n            style() {\r\n                const {width, height} = this;\r\n                const fixedWidth      = width.toString().indexOf('%') !== -1 ? width : `${width}px`;\r\n                const fixedHeight     = height.toString().indexOf('%') !== -1 ? height : `${height}px`;\r\n                return {\r\n                    width:  fixedWidth,\r\n                    height: fixedHeight,\r\n                };\r\n            },\r\n            editorOptions() {\r\n                return Object.assign({}, this.defaults, this.options, {\r\n                    value:    this.code,\r\n                    language: this.language,\r\n                    theme:    this.theme\r\n                });\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                defaults: {\r\n                    selectOnLineNumbers: true,\r\n                    roundedSelection:    false,\r\n                    readOnly:            false,\r\n                    cursorStyle:         'line',\r\n                    automaticLayout:     false,\r\n                    glyphMargin:         true\r\n                }\r\n            }\r\n        },\r\n        watch:    {\r\n            highlighted: {\r\n                handler(lines) {\r\n                    this.highlightLines(lines);\r\n                },\r\n                deep: true\r\n            }\r\n        },\r\n        methods:  {\r\n            debounce(func, wait, immediate) {\r\n                var timeout;\r\n                return function () {\r\n                    var context = this, args = arguments;\r\n                    var later   = function () {\r\n                        timeout = null;\r\n                        if (!immediate) func.apply(context, args);\r\n                    };\r\n                    var callNow = immediate && !timeout;\r\n                    clearTimeout(timeout);\r\n                    timeout = setTimeout(later, wait);\r\n                    if (callNow) func.apply(context, args);\r\n                };\r\n            },\r\n            highlightLines(lines) {\r\n                if (!this.editor) {\r\n                    return;\r\n                }\r\n                lines.forEach((line) => {\r\n                    const className   = line.class;\r\n                    const highlighted = this.$el.querySelector(`.${className}`);\r\n\r\n                    if (highlighted) {\r\n                        highlighted.classList.remove(className);\r\n                    }\r\n\r\n                    const number = parseInt(line.number);\r\n                    if (!this.editor && number < 1 || isNaN(number)) {\r\n                        return;\r\n                    }\r\n\r\n                    const selectedLine = this.$el.querySelector(`.view-lines [linenumber=\"${number}\"]`);\r\n                    if (selectedLine) {\r\n                        selectedLine.classList.add(className);\r\n                    }\r\n                });\r\n            }\r\n            ,\r\n            editorHasLoaded(editor, monaco) {\r\n                this.editor = editor;\r\n                this.monaco = monaco;\r\n                this.editor.onDidChangeModelContent(event =>\r\n                    this.codeChangeHandler(editor, event)\r\n                );\r\n                this.$emit('mounted', editor);\r\n            }\r\n            ,\r\n            codeChangeHandler: function (editor) {\r\n\r\n                if (this.codeChangeEmitter) {\r\n                    this.codeChangeEmitter(editor);\r\n                } else {\r\n                    this.codeChangeEmitter = this.debounce(\r\n                        function (editor) {\r\n                            this.$emit('codeChange', editor);\r\n                        },\r\n                        this.changeThrottle\r\n                    );\r\n                    this.codeChangeEmitter(editor);\r\n                }\r\n            }\r\n            ,\r\n            fetchEditor() {\r\n                monacoLoader.load(this.srcPath, this.createMonaco);\r\n            }\r\n            ,\r\n            createMonaco() {\r\n                this.editor = window.monaco.editor.create(this.$el, this.editorOptions);\r\n                this.editorHasLoaded(this.editor, window.monaco);\r\n                this.$emit('loaded', this.editor);\r\n            }\r\n            ,\r\n            destroyMonaco() {\r\n                if (typeof this.editor !== 'undefined') {\r\n                    this.editor.dispose();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    ;\r\n</script>\r\n"]}]}