{"remainingRequest":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\work\\bi-admin-vue-new\\src\\components\\editor\\sourceEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\work\\bi-admin-vue-new\\src\\components\\editor\\sourceEditor.vue","mtime":1552754725230},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport MonacoEditor from './monaco/Monaco';\nimport debug        from 'debug';\n\nconst log = debug('bi-admin-vue:source-editor');\n\nexport default {\n    components: {\n        MonacoEditor\n    },\n    name:       'SourceEditor',\n    props:      {\n        formatAfterMount: { //autoformat inital value after editor mount (300ms after)\n            type:    Boolean,\n            default: false\n        },\n        options:          { //extra editor options. goes directly to editor create function\n            type:    Object,\n            default: () => {\n            }\n        },\n        height:           { //editor height\n            type:    [String, Number],\n            default: () => 600\n        },\n        language:         { //lang of editor. Supported languages: https://code.visualstudio.com/docs/languages/overview\n            type:    String,\n            default: () => `html`\n        },\n        value:            { //initial editor value\n            type: String\n        },\n        readOnly:         {\n            type:    Boolean,\n            default: false\n        }\n    },\n    methods:    {\n        editorLoaded(editor) {\n            this.editor = editor;\n            if (this.formatAfterMount) {\n                setTimeout(() => {\n                    let action = this.editor.getAction('editor.action.formatDocument');\n                    if (action) {\n                        action.run();\n                    }\n                    if (this.readOnly) {\n                        this.editor.updateOptions({readOnly: true});\n                    }\n                }, 300)\n            }\n            if (this.readOnly) {\n                this.editor.updateOptions({readOnly: true});\n            }\n        },\n        onChange(editor) {\n            let html = editor.getValue();\n            if (html !== this.value) {\n                this.$emit('input', html);\n            }\n        },\n    }\n}\n",{"version":3,"sources":["sourceEditor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAeA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"sourceEditor.vue","sourceRoot":"src/components/editor","sourcesContent":["<template>\r\n    <div class=\"monaco-editor\">\r\n        <MonacoEditor\r\n                :height=\"height\"\r\n                :language=\"language\"\r\n                :code=\"value\"\r\n                :editorOptions=\"options\"\r\n                @codeChange=\"onChange\"\r\n                @loaded=\"editorLoaded\"\r\n        >\r\n        </MonacoEditor>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import MonacoEditor from './monaco/Monaco';\r\n    import debug        from 'debug';\r\n\r\n    const log = debug('bi-admin-vue:source-editor');\r\n\r\n    export default {\r\n        components: {\r\n            MonacoEditor\r\n        },\r\n        name:       'SourceEditor',\r\n        props:      {\r\n            formatAfterMount: { //autoformat inital value after editor mount (300ms after)\r\n                type:    Boolean,\r\n                default: false\r\n            },\r\n            options:          { //extra editor options. goes directly to editor create function\r\n                type:    Object,\r\n                default: () => {\r\n                }\r\n            },\r\n            height:           { //editor height\r\n                type:    [String, Number],\r\n                default: () => 600\r\n            },\r\n            language:         { //lang of editor. Supported languages: https://code.visualstudio.com/docs/languages/overview\r\n                type:    String,\r\n                default: () => `html`\r\n            },\r\n            value:            { //initial editor value\r\n                type: String\r\n            },\r\n            readOnly:         {\r\n                type:    Boolean,\r\n                default: false\r\n            }\r\n        },\r\n        methods:    {\r\n            editorLoaded(editor) {\r\n                this.editor = editor;\r\n                if (this.formatAfterMount) {\r\n                    setTimeout(() => {\r\n                        let action = this.editor.getAction('editor.action.formatDocument');\r\n                        if (action) {\r\n                            action.run();\r\n                        }\r\n                        if (this.readOnly) {\r\n                            this.editor.updateOptions({readOnly: true});\r\n                        }\r\n                    }, 300)\r\n                }\r\n                if (this.readOnly) {\r\n                    this.editor.updateOptions({readOnly: true});\r\n                }\r\n            },\r\n            onChange(editor) {\r\n                let html = editor.getValue();\r\n                if (html !== this.value) {\r\n                    this.$emit('input', html);\r\n                }\r\n            },\r\n        }\r\n    }\r\n</script>"]}]}