{"remainingRequest":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\work\\bi-admin-vue-new\\src\\components\\editor\\widgets\\youtube\\youtube.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\work\\bi-admin-vue-new\\src\\components\\editor\\widgets\\youtube\\youtube.vue","mtime":1552754725255},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport urlParser from \"js-video-url-parser\";\n\nexport default {\n    data() {\n        return {\n            parsedUrl: null\n        }\n    },\n    props: {\n        videourl    : {\n            type    : String,\n            default : null\n        },\n        controls    : {\n            type    : Boolean,\n            default : true\n        },\n        fs          : {\n            type    : Boolean,\n            default : false\n        },\n        autoplay    : {\n            type    : Boolean,\n            default : false\n        },\n        mute        : {\n            type    : Boolean,\n            default : false\n        },\n        showinfo    : {\n            type    : Boolean,\n            default : false\n        },\n        rel         : {\n            type    : Boolean,\n            default : true\n        },\n        start       : {\n            type    : String,\n            default : null\n        },\n        end         : {\n            type    : String,\n            default : null\n        },\n        loop        : {\n            type    : Boolean,\n            default : false\n        },\n        playlist    : {\n            type    : String,\n            default : null\n        },\n        list        : {\n            type    : String,\n            default : null\n        },\n        listtype    : {\n            type    : String,\n            default : null\n        }\n    },\n    mounted() {\n        let data = urlParser.parse(this.videourl);\n        if (data && data.mediaType === 'video') {\n            this.parsedUrl = urlParser.create({ videoInfo: data, format: 'embed' }) + \n                `?controls=${this.controls ? 1 : 0}` + \n                `&amp;fs=${this.fs ? 1 : 0}` + \n                `&amp;autoplay=${this.autoplay ? 1 : 0}` +\n                `&amp;mute=${this.mute ? 1 : 0}` +\n                `&amp;showinfo=${this.showinfo ? 1 : 0}` + \n                (this.rel ? `&amp;rel=${this.rel ? 1 : 0}` : ``) + \n                (this.start ? `&amp;start=${this.start}` : ``) + \n                (this.end ? `&amp;end=${this.end}` : ``) + \n                (\n                    this.loop ? `&amp;loop=${this.loop ? 1 : 0}` + \n                    ((\n                        this.loop && \n                        !(this.playlist && (this.playlist != 'null')) && \n                        !(this.list && (this.list != 'null'))\n                    ) ? `&amp;playlist=${data.id}` : ``)\n                    : ``\n                ) +\n                ((this.playlist && (this.playlist != 'null')) ? `&amp;playlist=${this.playlist}` : ``) + \n                ((this.list && (this.list != 'null')) ? `&amp;list=${this.list}` : ``) + \n                ((this.listtype && (this.listtype != 'null')) ? `&amp;listType=${this.listtype}` : ``);\n            console.log(this.parsedUrl);\n        } else {\n            console.error('No video url recoginzed');\n        }\n    }\n}\n",{"version":3,"sources":["youtube.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"youtube.vue","sourceRoot":"src/components/editor/widgets/youtube","sourcesContent":["<template>\r\n    <div style=\"border: 1px silver solid; padding: 10px; cursor: pointer; position: relative;\">\r\n        <div style=\"width: 100%; text-align: center; overflow: hidden;\">\r\n            <template v-if=\"parsedUrl\">\r\n                <iframe v-if=\"fs\"\r\n                    width=\"532px\"\r\n                    height=\"300px\"\r\n                    frameborder=\"0\"\r\n                    allow=\"autoplay; encrypted-media\"\r\n                    allowfullscreen\r\n                    :src=\"parsedUrl\"\r\n                ></iframe>\r\n                <iframe v-else\r\n                    width=\"532px\"\r\n                    height=\"300px\"\r\n                    frameborder=\"0\"\r\n                    allow=\"autoplay; encrypted-media\"\r\n                    :src=\"parsedUrl\"\r\n                ></iframe>\r\n                <div style=\"position: absolute; left: 0; top: 0; z-index: 2; background-color: transparent; height: 100%; width: 100%;\">\r\n                </div>\r\n            </template>\r\n            <template v-if=\"!parsedUrl\">\r\n                no video url\r\n            </template>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import urlParser from \"js-video-url-parser\";\r\n\r\n    export default {\r\n        data() {\r\n            return {\r\n                parsedUrl: null\r\n            }\r\n        },\r\n        props: {\r\n            videourl    : {\r\n                type    : String,\r\n                default : null\r\n            },\r\n            controls    : {\r\n                type    : Boolean,\r\n                default : true\r\n            },\r\n            fs          : {\r\n                type    : Boolean,\r\n                default : false\r\n            },\r\n            autoplay    : {\r\n                type    : Boolean,\r\n                default : false\r\n            },\r\n            mute        : {\r\n                type    : Boolean,\r\n                default : false\r\n            },\r\n            showinfo    : {\r\n                type    : Boolean,\r\n                default : false\r\n            },\r\n            rel         : {\r\n                type    : Boolean,\r\n                default : true\r\n            },\r\n            start       : {\r\n                type    : String,\r\n                default : null\r\n            },\r\n            end         : {\r\n                type    : String,\r\n                default : null\r\n            },\r\n            loop        : {\r\n                type    : Boolean,\r\n                default : false\r\n            },\r\n            playlist    : {\r\n                type    : String,\r\n                default : null\r\n            },\r\n            list        : {\r\n                type    : String,\r\n                default : null\r\n            },\r\n            listtype    : {\r\n                type    : String,\r\n                default : null\r\n            }\r\n        },\r\n        mounted() {\r\n            let data = urlParser.parse(this.videourl);\r\n            if (data && data.mediaType === 'video') {\r\n                this.parsedUrl = urlParser.create({ videoInfo: data, format: 'embed' }) + \r\n                    `?controls=${this.controls ? 1 : 0}` + \r\n                    `&amp;fs=${this.fs ? 1 : 0}` + \r\n                    `&amp;autoplay=${this.autoplay ? 1 : 0}` +\r\n                    `&amp;mute=${this.mute ? 1 : 0}` +\r\n                    `&amp;showinfo=${this.showinfo ? 1 : 0}` + \r\n                    (this.rel ? `&amp;rel=${this.rel ? 1 : 0}` : ``) + \r\n                    (this.start ? `&amp;start=${this.start}` : ``) + \r\n                    (this.end ? `&amp;end=${this.end}` : ``) + \r\n                    (\r\n                        this.loop ? `&amp;loop=${this.loop ? 1 : 0}` + \r\n                        ((\r\n                            this.loop && \r\n                            !(this.playlist && (this.playlist != 'null')) && \r\n                            !(this.list && (this.list != 'null'))\r\n                        ) ? `&amp;playlist=${data.id}` : ``)\r\n                        : ``\r\n                    ) +\r\n                    ((this.playlist && (this.playlist != 'null')) ? `&amp;playlist=${this.playlist}` : ``) + \r\n                    ((this.list && (this.list != 'null')) ? `&amp;list=${this.list}` : ``) + \r\n                    ((this.listtype && (this.listtype != 'null')) ? `&amp;listType=${this.listtype}` : ``);\r\n                console.log(this.parsedUrl);\r\n            } else {\r\n                console.error('No video url recoginzed');\r\n            }\r\n        }\r\n    }\r\n</script>"]}]}