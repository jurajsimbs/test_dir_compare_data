{"remainingRequest":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\work\\bi-admin-vue-new\\src\\components\\application\\SinglePage.vue?vue&type=style&index=0&id=72dd7c46&lang=scss&scoped=true&","dependencies":[{"path":"C:\\work\\bi-admin-vue-new\\src\\components\\application\\SinglePage.vue","mtime":1552754725220},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\sass-loader\\lib\\loader.js","mtime":1533139052000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.actions {\n    justify-content: space-between;\n}\n\n.wrapper {\n    width: 100%;\n    min-height: 100vh;\n}\n\n.fade-enter-active, .fade-leave-active {\n    transition-property: opacity;\n    transition-duration: .25s;\n}\n\n.fade-enter-active {\n    transition-delay: .25s;\n}\n\n.fade-enter, .fade-leave-active {\n    opacity: 0\n}\n\n.fill-screen-height {\n    height: 100vh;\n}\n\n.offline-image {\n    font-size: 30em;\n    opacity: .5;\n}\n\n.offline-label {\n    font-size: 2em;\n    opacity: .7;\n}\n\n.adblock-warning-body {\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n\n}\n",{"version":3,"sources":["SinglePage.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmbA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA","file":"SinglePage.vue","sourceRoot":"src/components/application","sourcesContent":["<template>\r\n    <div class=\"wrapper\">\r\n        <template v-if=\"fontsReady && settings\">\r\n            <template v-if=\"isLogged && userData\">\r\n                <slot name=\"panel\"></slot>\r\n                <v-toolbar app :light=\"this.$vuetify.theme.name===themes.YELLOW.name\"\r\n                           :dark=\"this.$vuetify.theme.name!==themes.YELLOW.name\" color=\"primary\">\r\n                    <v-toolbar-side-icon @click=\"toggleDrawer\"></v-toolbar-side-icon>\r\n                    <v-toolbar-title>{{title}}</v-toolbar-title>\r\n                    <v-spacer/>\r\n                    <v-menu v-if=\"isProductionEnv()\" bottom left>\r\n                        <v-btn icon slot=\"activator\" dark>\r\n                            <v-icon color=\"red\">warning</v-icon>\r\n                        </v-btn>\r\n                        <v-list>\r\n                            <v-list-tile>\r\n                                <v-list-tile-content>\r\n                                    <v-list-tile-title>You are on {{this.settings.environment}} environment!\r\n                                    </v-list-tile-title>\r\n                                </v-list-tile-content>\r\n                            </v-list-tile>\r\n                        </v-list>\r\n                    </v-menu>\r\n                    <v-menu bottom left>\r\n                        <v-btn icon slot=\"activator\" dark>\r\n                            <v-icon :color=\"this.$vuetify.theme.name===themes.YELLOW.name?'black':'white'\">more_vert\r\n                            </v-icon>\r\n                        </v-btn>\r\n                        <v-list>\r\n                            <v-list-tile @click=\"confirmLogout\">\r\n                                <v-list-tile-action>\r\n                                    <v-icon :color=\"'black'\">\r\n                                        exit_to_app\r\n                                    </v-icon>\r\n                                </v-list-tile-action>\r\n                                <v-list-tile-content>\r\n                                    <v-list-tile-title>Logout</v-list-tile-title>\r\n                                </v-list-tile-content>\r\n                            </v-list-tile>\r\n                            <v-list-tile v-if=\"availableLanguages && Object.keys(availableLanguages).length > 1\"\r\n                                         @click=\"showLanguageDialog\">\r\n                                <v-list-tile-action>\r\n                                    <v-icon :color=\"'black'\">\r\n                                        translate\r\n                                    </v-icon>\r\n                                </v-list-tile-action>\r\n                                <v-list-tile-content>\r\n                                    <v-list-tile-title>\r\n                                        <v-list-tile-title>Switch language ({{activeLanguageName}})</v-list-tile-title>\r\n                                    </v-list-tile-title>\r\n                                </v-list-tile-content>\r\n                            </v-list-tile>\r\n                        </v-list>\r\n                    </v-menu>\r\n                </v-toolbar>\r\n                <v-content>\r\n                    <v-container fluid class=\"pb-0 pt-0 pl-0 pr-0\" fill-height>\r\n                        <router-view></router-view>\r\n                    </v-container>\r\n                </v-content>\r\n                <v-footer app dark fixed class=\"pa-3\">\r\n                    <v-spacer></v-spacer>\r\n                    <div class=\"grey--text\">&copy; Bohemia Interactive a.s. {{ new Date().getFullYear() }}</div>\r\n                </v-footer>\r\n            </template>\r\n            <template v-if=\"!isLogged || !userData\">\r\n                <LoginScreen @logged-in=\"onUserLoggedIn\"></LoginScreen>\r\n            </template>\r\n        </template>\r\n        <v-dialog :width=\"300\" v-model=\"logoutDialogVisible\">\r\n            <v-card>\r\n                <v-card-title primary-title>\r\n                    <h3 class=\"headline mb-0\">\r\n                        Logging out...\r\n                    </h3>\r\n                </v-card-title>\r\n                <v-card-text>\r\n                    <v-progress-circular indeterminate color=\"primary\" :size=\"40\"/>\r\n                </v-card-text>\r\n            </v-card>\r\n        </v-dialog>\r\n        <v-dialog :width=\"300\" v-model=\"confirmationDialog\" @close=\"cancelConfirmDialog\">\r\n            <v-card>\r\n                <v-card-title primary-title>\r\n                    <h3 class=\"headline mb-0\">\r\n                        Confirmation\r\n                    </h3>\r\n                </v-card-title>\r\n                <v-card-text>\r\n                    {{confirmationMessage}}\r\n                </v-card-text>\r\n                <v-card-actions>\r\n                    <v-btn flat color=\"success\" @click=\"confirmConfirmDialog\">OK</v-btn>\r\n                    <v-btn color=\"error\" @click=\"cancelConfirmDialog\" dark>CANCEL</v-btn>\r\n                </v-card-actions>\r\n            </v-card>\r\n        </v-dialog>\r\n        <v-dialog :width=\"300\" v-model=\"languageDialog\" @close=\"cancelLanguageDialog\">\r\n            <v-card>\r\n                <v-card-title primary-title>\r\n                    <h3 class=\"headline mb-0\">\r\n                        Select language\r\n                    </h3>\r\n                </v-card-title>\r\n                <v-card-text>\r\n                    <v-select :items=\"languageItems\" v-model=\"activeLanguage\"></v-select>\r\n                </v-card-text>\r\n                <v-card-actions class=\"actions\">\r\n                    <v-btn flat color=\"error\" @click=\"cancelLanguageDialog\" dark>Cancel</v-btn>\r\n                    <v-btn primary @click=\"switchLanguage\">Switch language</v-btn>\r\n                </v-card-actions>\r\n            </v-card>\r\n        </v-dialog>\r\n        <v-snackbar\r\n                :timeout=\"notification.timeouot\"\r\n                top\r\n                right\r\n                multi-line\r\n                v-model=\"notification.visible\"\r\n        >\r\n            {{ notification.text }}\r\n            <v-btn flat :color=\"notification.color || 'info'\" @click.native=\"notification.visible = false\">Close</v-btn>\r\n        </v-snackbar>\r\n        <v-container align-center fill-height justify-center v-if=\"offline\" class=\"fill-screen-height\">\r\n            <div style=\"display: flex; flex-direction: column; text-align: center;\">\r\n                <i @click=\"reload\" class=\"material-icons offline-image\">sentiment_very_dissatisfied</i>\r\n                <div class=\"offline-label\">We're offline</div>\r\n                <div>Check console for more detailed error description</div>\r\n            </div>\r\n        </v-container>\r\n        <v-dialog v-model=\"showAdblockWarningDialog\" max-width=\"50%\">\r\n            <v-card>\r\n                <v-toolbar dark color=\"error\">\r\n                    <v-icon>warning</v-icon>\r\n                    <v-toolbar-title>Ads blocker detected</v-toolbar-title>\r\n                    <v-spacer></v-spacer>\r\n                    <v-btn icon dark @click.native=\"closeAdblockWarningDialog\">\r\n                        <v-icon>close</v-icon>\r\n                    </v-btn>\r\n                </v-toolbar>\r\n                <v-card-text>\r\n                    <div class=\"adblock-warning-body\">\r\n                            <h1>Adblock is active</h1>\r\n                            <br/><br/>\r\n                            <p>Please deactivate your adblock on this page <u>permanently</u> to prevent any unexpected\r\n                                behaviour!</p>\r\n                        <br/>\r\n                        <p>\r\n                                <i>(like missing icons, unresponsive dialogs, dummy buttons, etc.)</i>\r\n                            </p>\r\n                    </div>\r\n                </v-card-text>\r\n                <v-card-actions style=\"display: inline-block\">\r\n                    <v-btn flat @click=\"closeAdblockWarningDialog\">Close</v-btn>\r\n                </v-card-actions>\r\n            </v-card>\r\n        </v-dialog>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import {mapActions, mapGetters} from 'vuex';\r\n    import Events from '../../app/events';\r\n    import LocalSettings from '../../app/localSettings';\r\n    import Themes from '../../app/theme';\r\n    import Environment from '../../const/env';\r\n    import languageCodes from '../../const/languageCodes';\r\n    import LoginScreen from '../pages/login/loginScreenComponent.vue'\r\n    import events from './../../app/events';\r\n    import './../../styles/ckeditor.css';\r\n\r\n    const baitClass = 'pub300x250 pub300x250m pub728x90 text-ad textAd textad textads text-ads text-ad-links';\r\n    const baitStyle = 'width: 1000px !important; height: 1000px !important; position: absolute !important; left: -10000px !important; top: -1000px !important; display: block !important';\r\n    const attributes = ['offsetParent', 'offsetHeight', 'offsetLeft', 'offsetTop', 'offsetWidth', 'clientHeight', 'clientWidth'];\r\n\r\n    var WebFont = require('webfontloader');\r\n\r\n    const log = require('debug')('bi-admin-vue:app:single-page');\r\n\r\n    export default {\r\n        name      : 'SinglePageApplication',\r\n        props     : ['rootPanel'],\r\n        components: {\r\n            LoginScreen,\r\n        },\r\n        computed  : {\r\n            activeLanguageName() {\r\n                if (!this.availableLanguages[this.$i18n.locale]) {\r\n                    return 'unknown';\r\n                }\r\n                return this.availableLanguages[this.$i18n.locale].name;\r\n            },\r\n            languageItems() {\r\n                let list = [];\r\n                Object.keys(this.availableLanguages).map((langCode) => {\r\n                    list.push({\r\n                        value: this.availableLanguages[langCode].code,\r\n                        text : this.availableLanguages[langCode].name\r\n                    });\r\n                });\r\n                return list;\r\n            },\r\n            themes() {\r\n                return Themes\r\n            },\r\n            ...mapGetters('user', {\r\n                isLogged: 'isLogged',\r\n                userData: 'user',\r\n            }),\r\n            ...mapGetters('settings', {\r\n                settings: 'settings'\r\n            }),\r\n            ...mapGetters('languages', {\r\n                availableLanguages: 'availableLanguages'\r\n            })\r\n\r\n        },\r\n        data() {\r\n            return {\r\n                title                   : 'Admin panel',\r\n                fontsReady              : false,\r\n                drawerAlwaysVisible     : false,\r\n                logoutDialogVisible     : false,\r\n                confirmationDialog      : false,\r\n                languageDialog          : false,\r\n                offline                 : false,\r\n                showAdblockWarningDialog: false,\r\n                activeLanguage          : this.getActiveLanguageCode(),\r\n                confirmationMessage     : '',\r\n                notification            : {\r\n                    timeout: 5000,\r\n                    color  : 'primary',\r\n                    visible: false,\r\n                    text   : ''\r\n                }\r\n            }\r\n        },\r\n        methods   : {\r\n            async confirmLogout() {\r\n                let result = await this.confirm('Do you really want to logout?')\r\n                if (result) {\r\n                    this.logoutUser();\r\n                }\r\n            },\r\n            showLanguageDialog() {\r\n                this.languageDialog = true;\r\n            },\r\n            switchLanguage() {\r\n                this.$i18n.locale = this.activeLanguage;\r\n                localStorage.setItem('locale', this.$i18n.locale);\r\n                this.languageDialog = false;\r\n                window.location.reload(true);\r\n            },\r\n            cancelLanguageDialog() {\r\n                this.languageDialog = false;\r\n            },\r\n            getActiveLanguageCode() {\r\n                log(`Active language: ${this.$i18n.locale || languageCodes.ENGLISH}`);\r\n                return this.$i18n.locale || languageCodes.ENGLISH;\r\n            },\r\n            isProductionEnv() {\r\n                return this.settings.environment === Environment.PRODUCTION;\r\n            },\r\n            reload() {\r\n                location.reload();\r\n            },\r\n            confirmConfirmDialog() {\r\n                this.$broadcast(events.CONFIRMATION.CLOSE, {result: true});\r\n                this.confirmationDialog = false;\r\n            },\r\n            cancelConfirmDialog() {\r\n                this.$broadcast(events.CONFIRMATION.CLOSE, {result: false});\r\n                this.confirmationDialog = false;\r\n            },\r\n            ...mapActions('user', {\r\n                getUser: 'getUser',\r\n                logout : 'logout'\r\n            }),\r\n            showConfirmation(event) {\r\n                this.confirmationMessage = event.message;\r\n                this.confirmationDialog = true;\r\n            },\r\n            ...mapActions('settings', {\r\n                getSettings: 'getSettings'\r\n            }),\r\n            ...mapActions('languages', {\r\n                getLanguages: 'getLanguages'\r\n            }),\r\n            onUserLoggedIn() {\r\n                this.getUser();\r\n            },\r\n            onFontsLoaded() {\r\n                this.fontsReady = true;\r\n            },\r\n            toggleDrawer() {\r\n                this.appManager.$emit(events.DRAWER.TOGGLE);\r\n            },\r\n            makeDrawerAlwaysVisible(alwaysVisible) {\r\n                this.drawerAlwaysVisible = alwaysVisible;\r\n            },\r\n            closeAdblockWarningDialog() {\r\n                this.showAdblockWarningDialog = false;\r\n            },\r\n            checkAttributes(attributes, bait) {\r\n                return attributes.reduce((prev, cur) => prev || ((bait[cur] === undefined) ? false : !bait[cur]),\r\n                    false);\r\n            },\r\n            _insertAd() {\r\n                const bait = window.document.createElement('div');\r\n                bait.setAttribute('class', baitClass);\r\n                bait.setAttribute('style', baitStyle);\r\n                const insertionPlace = window.document.getElementsByTagName('body')[0];\r\n                return insertionPlace.appendChild(bait);\r\n            },\r\n            checkAdblock() {\r\n                let bait = this._insertAd();\r\n                if (window.document.body.getAttribute('abp') || this.checkAttributes(attributes, bait)) {\r\n                    console.warn('adblock is running!');\r\n                    this.showAdblockWarningDialog = true;\r\n                }\r\n            },\r\n            async logoutUser() {\r\n                this.logoutDialogVisible = true;\r\n\r\n                try {\r\n                    let result = await this.logout();\r\n                    this.showSuccessNotification('Logout was successful');\r\n                } catch (e) {\r\n                    this.showSuccessNotification('Unable to logout');\r\n                } finally {\r\n                    this.logoutDialogVisible = false;\r\n                }\r\n            },\r\n            showNotification(type, message) {\r\n                this.notification.color = type;\r\n                this.notification.text = message;\r\n                this.notification.visible = true;\r\n                log('Error:', type, message);\r\n            },\r\n            showSuccessNotification(message, title) {\r\n                this.showNotification('success', message);\r\n            },\r\n            showErrorNotification(message, title) {\r\n                this.showNotification('error', message);\r\n            },\r\n            showWarningNotification(message, title) {\r\n                this.showNotification('warning', message);\r\n            }\r\n        },\r\n        beforeDestroy() {\r\n            this.appManager.$off(Events.SUCCESS, this.showSuccessNotification);\r\n            this.appManager.$off(Events.ERROR, this.showErrorNotification);\r\n            this.appManager.$off(Events.WARNING, this.showWarningNotification);\r\n            this.appManager.$off(Events.DRAWER.ALWAYS_VISIBLE, this.makeDrawerAlwaysVisible);\r\n            this.appManager.$off(Events.CONFIRMATION.OPEN, this.showConfirmation);\r\n        },\r\n        async mounted() {\r\n            this.appManager.$on(Events.SUCCESS, this.showSuccessNotification);\r\n            this.appManager.$on(Events.ERROR, this.showErrorNotification);\r\n            this.appManager.$on(Events.WARNING, this.showWarningNotification);\r\n            this.appManager.$on(Events.DRAWER.ALWAYS_VISIBLE, this.makeDrawerAlwaysVisible);\r\n            this.appManager.$on(Events.CONFIRMATION.OPEN, this.showConfirmation);\r\n\r\n            WebFont.load({\r\n                google: {\r\n                    families: ['Lato', 'Roboto', 'Material Icons']\r\n                },\r\n                active: this.onFontsLoaded\r\n            });\r\n\r\n            log('Initialising user and settings data');\r\n            try {\r\n                await this.getUser();\r\n            } catch (e) {\r\n                if (e && e.body && e.body.code !== 401) {\r\n                    log('Unable to init app. User info unavailable', e);\r\n                    this.offline = true;\r\n                    throw e;\r\n                }\r\n            }\r\n\r\n            let locale = localStorage.getItem('locale');\r\n            try {\r\n                await this.getLanguages();\r\n                if (locale && locale !== languageCodes.ENGLISH) {\r\n                    log(`Got locale ${locale}`);\r\n                    try {\r\n                        let lang = await this.$http.get(`lang/${locale}`);\r\n                        log(`Language ${locale} loaded`, lang.body);\r\n                        if (!lang || !lang.body || !lang.body.translations) {\r\n                            throw new Error(`No translations found in language ${locale} request`)\r\n                        }\r\n                        log(`Got lang ${locale} translations`, lang.body.translations);\r\n                        this.$i18n.setLocaleMessage(locale, lang.body.translations);\r\n                    } catch (e) {\r\n                        console.error(`Unable to load language ${locale}:`, e);\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                log('Unable to fetch languages. Sticking to english', e);\r\n            }\r\n            log('Available languages: ', this.availableLanguages);\r\n\r\n            try {\r\n                await this.getSettings();\r\n                if (this.settings && this.settings.adminPanelTitle) {\r\n                    document.title = this.settings.adminPanelTitle;\r\n                    this.title = this.settings.adminPanelTitle;\r\n                }\r\n            } catch (e) {\r\n                log('Unable to init app. Settings unavailable', e);\r\n                this.offline = true;\r\n            }\r\n            log(`Environment: ${this.settings.environment}`);\r\n            let theme = Themes.BLUE;\r\n            if (this.settings.environment && this.isProductionEnv()) {\r\n                theme = Themes.RED;\r\n            }\r\n            if (this.settings.environment && this.settings.environment === Environment.PREPRODUCTION) {\r\n                theme = Themes.GREEN;\r\n            }\r\n            if (this.settings.environment && this.settings.environment === Environment.DEVELOPMENT) {\r\n                theme = Themes.YELLOW;\r\n            }\r\n            this.$vuetify.theme = theme;\r\n            log('Language loaded: ', this.$i18n.getLocaleMessage(locale));\r\n            this.checkAdblock()\r\n        },\r\n        created() {\r\n            this.drawerAlwaysVisible = LocalSettings.get('drawerAlwaysVisible');\r\n        }\r\n    }\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n    .actions {\r\n        justify-content: space-between;\r\n    }\r\n\r\n    .wrapper {\r\n        width: 100%;\r\n        min-height: 100vh;\r\n    }\r\n\r\n    .fade-enter-active, .fade-leave-active {\r\n        transition-property: opacity;\r\n        transition-duration: .25s;\r\n    }\r\n\r\n    .fade-enter-active {\r\n        transition-delay: .25s;\r\n    }\r\n\r\n    .fade-enter, .fade-leave-active {\r\n        opacity: 0\r\n    }\r\n\r\n    .fill-screen-height {\r\n        height: 100vh;\r\n    }\r\n\r\n    .offline-image {\r\n        font-size: 30em;\r\n        opacity: .5;\r\n    }\r\n\r\n    .offline-label {\r\n        font-size: 2em;\r\n        opacity: .7;\r\n    }\r\n\r\n    .adblock-warning-body {\r\n        display: flex;\r\n        align-items: center;\r\n        flex-direction: column;\r\n\r\n    }\r\n</style>\r\n"]}]}