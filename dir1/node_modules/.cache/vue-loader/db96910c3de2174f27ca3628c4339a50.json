{"remainingRequest":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\work\\bi-admin-vue-new\\src\\components\\pages\\login\\loginScreenComponent.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\work\\bi-admin-vue-new\\src\\components\\pages\\login\\loginScreenComponent.vue","mtime":1552754725259},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {mapActions, mapGetters} from 'vuex';\nimport Events from './../../../app/events';\n\nexport default {\n    name    : 'LoginScreen',\n    data() {\n        return {\n            loggingIn: false,\n            isError  : false,\n            form     : {\n                username  : null,\n                password  : null,\n                rememberMe: false,\n            }\n        }\n    },\n    computed: {\n        ...mapGetters('settings', {\n            settings: 'settings'\n        })\n    },\n    methods : {\n        ...mapActions('user', {\n            login: 'login'\n        }),\n        wait(sec) {\n            return new Promise((resolve) => {\n                setTimeout(() => {\n                    return resolve();\n                }, sec * 1000)\n            });\n        },\n        async onSubmit() {\n            let valid = await this.$validator.validate();\n\n            if (valid) {\n                this.loggingIn = true;\n                await this.wait(1);\n                try {\n                    await this.login(this.form);\n                    this.appManager.$emit(Events.SUCCESS, 'Login successful');\n                    this.$emit('logged-in', true);\n                } catch (e) {\n                    let message = 'Unable to login';\n                    if (e.message) {\n                        message = e.message;\n                    }\n                    this.isError = true;\n                    setTimeout(() => {\n                        this.isError = false;\n                        this.appManager.$emit(Events.ERROR, message);\n                    }, 2000);\n                } finally {\n                    await this.wait(1);\n                    this.loggingIn = false;\n                }\n            }\n        }\n    }\n}\n",{"version":3,"sources":["loginScreenComponent.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"loginScreenComponent.vue","sourceRoot":"src/components/pages/login","sourcesContent":["<template>\r\n    <v-card :class=\"'login-dialog elevation-5 ' + (isError?'shake':'')\">\r\n        <v-card-media class=\"login-dialog-image\" :src=\"adminPanelImageUrl\" height=\"120px\"/>\r\n        <v-card-text>\r\n            <form role=\"login\" v-on:submit.prevent=\"onSubmit\">\r\n                <v-text-field v-validate=\"{ required: true}\"\r\n                              :error-messages=\"errors.collect('email')\"\r\n                              name=\"email\"\r\n                              type=\"email\"\r\n                              label=\"Username or E-Mail\"\r\n                              v-model=\"form.username\"/>\r\n                <v-text-field v-validate=\"{ required: true}\"\r\n                              :error-messages=\"errors.collect('password')\"\r\n                              name=\"password\"\r\n                              label=\"Password\"\r\n                              type=\"password\"\r\n                              v-model=\"form.password\"/>\r\n                <v-btn :loading=\"loggingIn\"\r\n                       :disabled=\"errors.any() || loggingIn\"\r\n                       type=\"submit\"\r\n                       block\r\n                       color=\"primary\"\r\n                >\r\n                    LOGIN\r\n                </v-btn>\r\n            </form>\r\n        </v-card-text>\r\n    </v-card>\r\n</template>\r\n\r\n<script>\r\n    import {mapActions, mapGetters} from 'vuex';\r\n    import Events from './../../../app/events';\r\n\r\n    export default {\r\n        name    : 'LoginScreen',\r\n        data() {\r\n            return {\r\n                loggingIn: false,\r\n                isError  : false,\r\n                form     : {\r\n                    username  : null,\r\n                    password  : null,\r\n                    rememberMe: false,\r\n                }\r\n            }\r\n        },\r\n        computed: {\r\n            ...mapGetters('settings', {\r\n                settings: 'settings'\r\n            })\r\n        },\r\n        methods : {\r\n            ...mapActions('user', {\r\n                login: 'login'\r\n            }),\r\n            wait(sec) {\r\n                return new Promise((resolve) => {\r\n                    setTimeout(() => {\r\n                        return resolve();\r\n                    }, sec * 1000)\r\n                });\r\n            },\r\n            async onSubmit() {\r\n                let valid = await this.$validator.validate();\r\n\r\n                if (valid) {\r\n                    this.loggingIn = true;\r\n                    await this.wait(1);\r\n                    try {\r\n                        await this.login(this.form);\r\n                        this.appManager.$emit(Events.SUCCESS, 'Login successful');\r\n                        this.$emit('logged-in', true);\r\n                    } catch (e) {\r\n                        let message = 'Unable to login';\r\n                        if (e.message) {\r\n                            message = e.message;\r\n                        }\r\n                        this.isError = true;\r\n                        setTimeout(() => {\r\n                            this.isError = false;\r\n                            this.appManager.$emit(Events.ERROR, message);\r\n                        }, 2000);\r\n                    } finally {\r\n                        await this.wait(1);\r\n                        this.loggingIn = false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n    .shake {\r\n        animation: shake 0.82s cubic-bezier(.36, .07, .19, .97) both;\r\n        transform: translate3d(0, 0, 0);\r\n        backface-visibility: hidden;\r\n        /*perspective: 1000px;*/\r\n    }\r\n\r\n    @keyframes shake {\r\n        10%, 90% {\r\n            transform: translate3d(calc(-50% - 1px), -50%, 0);\r\n        }\r\n\r\n        20%, 80% {\r\n            transform: translate3d(calc(-50% + 2px), -50%, 0);\r\n        }\r\n\r\n        30%, 50%, 70% {\r\n            transform: translate3d(calc(-50% - 4px), -50%, 0);\r\n        }\r\n\r\n        40%, 60% {\r\n            transform: translate3d(calc(-50% + 4px), -50%, 0);\r\n        }\r\n    }\r\n\r\n    .login-dialog {\r\n        width: 300px;\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 50%;\r\n        padding: 0;\r\n        transform: translate3d(-50%, -50%, 0);\r\n    }\r\n</style>"]}]}