{"remainingRequest":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\work\\bi-admin-vue-new\\src\\components\\editor\\alternateSourceEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\work\\bi-admin-vue-new\\src\\components\\editor\\alternateSourceEditor.vue","mtime":1552754725223},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport './ace.css';\nimport defaultToolbarButtons from './sourceEditor/defaultToolbarButtons';\nimport toolbar from './sourceEditor/toolbarButtons';\nimport AceEditor from './ace/index';\nrequire('brace/ext/language_tools');\nrequire('brace/mode/html');\nrequire('brace/mode/css');\nrequire('brace/mode/javascript');\nrequire('brace/mode/json');\nrequire('brace/theme/chrome');\nrequire('brace/ext/searchbox');\nrequire('brace/ext/statusbar');\n\nconst beautify = require('js-beautify');\n\nlet changeEventTimer = null;\n\nexport default {\n    components: {\n        AceEditor\n    },\n    computed  : {\n        toolbarButtons() {\n            return toolbar;\n        }\n    },\n    data() {\n        return {\n            editorContent: '',\n            editorOptions: {},\n            editor       : null\n        }\n    },\n    name      : 'AlternateSourceEditor',\n    props     : {\n        formatAfterMount: { //autoformat inital value after editor mount (300ms after)\n            type   : Boolean,\n            default: false\n        },\n        options         : { //extra editor options. goes directly to editor create function\n            type   : Object,\n            default: () => {\n            }\n        },\n        height          : { //editor height\n            type   : [String, Number],\n            default: () => 600\n        },\n        language        : { //lang of editor. Supported languages: https://code.visualstudio.com/docs/languages/overview\n            type   : String,\n            default: () => `html`\n        },\n        value           : { //initial editor value\n            type: String\n        },\n        toolbar         : {\n            type   : Array,\n            default: () => {\n                return defaultToolbarButtons\n            }\n        },\n        readOnly        : {\n            type   : Boolean,\n            default: false\n        }\n    },\n    watch     : {\n        editorContent(newContentValue) {\n            if (changeEventTimer) {\n                clearTimeout(changeEventTimer);\n            }\n            changeEventTimer = setTimeout(() => {\n                this.$emit('input', newContentValue);\n            }, 500);\n        }\n    },\n    beforeDestroy() {\n        if (changeEventTimer) {\n            clearTimeout(changeEventTimer)\n        }\n    },\n    created() {\n        let options = Object.assign({}, this.options);\n        if (this.readOnly) {\n            options.readOnly = true;\n        }\n        this.editorOptions = options;\n    },\n    methods   : {\n        autoformat() {\n            if (this.formatAfterMount && (this.language === 'javascript' || this.language === 'json')) {\n                this.editorContent = beautify.js_beautify(this.value);\n            } else if (this.formatAfterMount && (this.language === 'html')) {\n                this.editorContent = beautify.html_beautify(this.value);\n            } else if (this.formatAfterMount && (this.language === 'css')) {\n                this.editorContent = beautify.css_beautify(this.value);\n            } else {\n                this.editorContent = this.value;\n            }\n        },\n        editorInit: function (editor) {\n\n\n            this.editor = editor;\n            this.autoformat();\n        },\n    }\n}\n",{"version":3,"sources":["alternateSourceEditor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA","file":"alternateSourceEditor.vue","sourceRoot":"src/components/editor","sourcesContent":["<template>\r\n    <div class=\"ace-editor\">\r\n        <v-toolbar v-if=\"toolbar.length > 0\" dense>\r\n            <v-btn v-if=\"toolbar.indexOf(toolbarButtons.AUTOFORMAT) > -1\" @click=\"autoformat\" title=\"Autoformat\" icon>\r\n                <v-icon>notes</v-icon>\r\n            </v-btn>\r\n        </v-toolbar>\r\n        <v-card>\r\n            <v-card-media>\r\n                <AceEditor v-model=\"editorContent\" @init=\"editorInit\" :lang=\"language\" theme=\"chrome\"\r\n                           :height=\"height\" :options=\"editorOptions\"></AceEditor>\r\n            </v-card-media>\r\n        </v-card>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import './ace.css';\r\n    import defaultToolbarButtons from './sourceEditor/defaultToolbarButtons';\r\n    import toolbar from './sourceEditor/toolbarButtons';\r\n    import AceEditor from './ace/index';\r\n    require('brace/ext/language_tools');\r\n    require('brace/mode/html');\r\n    require('brace/mode/css');\r\n    require('brace/mode/javascript');\r\n    require('brace/mode/json');\r\n    require('brace/theme/chrome');\r\n    require('brace/ext/searchbox');\r\n    require('brace/ext/statusbar');\r\n\r\n    const beautify = require('js-beautify');\r\n\r\n    let changeEventTimer = null;\r\n\r\n    export default {\r\n        components: {\r\n            AceEditor\r\n        },\r\n        computed  : {\r\n            toolbarButtons() {\r\n                return toolbar;\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                editorContent: '',\r\n                editorOptions: {},\r\n                editor       : null\r\n            }\r\n        },\r\n        name      : 'AlternateSourceEditor',\r\n        props     : {\r\n            formatAfterMount: { //autoformat inital value after editor mount (300ms after)\r\n                type   : Boolean,\r\n                default: false\r\n            },\r\n            options         : { //extra editor options. goes directly to editor create function\r\n                type   : Object,\r\n                default: () => {\r\n                }\r\n            },\r\n            height          : { //editor height\r\n                type   : [String, Number],\r\n                default: () => 600\r\n            },\r\n            language        : { //lang of editor. Supported languages: https://code.visualstudio.com/docs/languages/overview\r\n                type   : String,\r\n                default: () => `html`\r\n            },\r\n            value           : { //initial editor value\r\n                type: String\r\n            },\r\n            toolbar         : {\r\n                type   : Array,\r\n                default: () => {\r\n                    return defaultToolbarButtons\r\n                }\r\n            },\r\n            readOnly        : {\r\n                type   : Boolean,\r\n                default: false\r\n            }\r\n        },\r\n        watch     : {\r\n            editorContent(newContentValue) {\r\n                if (changeEventTimer) {\r\n                    clearTimeout(changeEventTimer);\r\n                }\r\n                changeEventTimer = setTimeout(() => {\r\n                    this.$emit('input', newContentValue);\r\n                }, 500);\r\n            }\r\n        },\r\n        beforeDestroy() {\r\n            if (changeEventTimer) {\r\n                clearTimeout(changeEventTimer)\r\n            }\r\n        },\r\n        created() {\r\n            let options = Object.assign({}, this.options);\r\n            if (this.readOnly) {\r\n                options.readOnly = true;\r\n            }\r\n            this.editorOptions = options;\r\n        },\r\n        methods   : {\r\n            autoformat() {\r\n                if (this.formatAfterMount && (this.language === 'javascript' || this.language === 'json')) {\r\n                    this.editorContent = beautify.js_beautify(this.value);\r\n                } else if (this.formatAfterMount && (this.language === 'html')) {\r\n                    this.editorContent = beautify.html_beautify(this.value);\r\n                } else if (this.formatAfterMount && (this.language === 'css')) {\r\n                    this.editorContent = beautify.css_beautify(this.value);\r\n                } else {\r\n                    this.editorContent = this.value;\r\n                }\r\n            },\r\n            editorInit: function (editor) {\r\n\r\n\r\n                this.editor = editor;\r\n                this.autoformat();\r\n            },\r\n        }\r\n    }\r\n</script>\r\n<style scoped>\r\n    .ace-editor {\r\n        z-index: 1;\r\n    }\r\n</style>"]}]}