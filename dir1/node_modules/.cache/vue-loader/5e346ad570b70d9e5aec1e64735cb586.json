{"remainingRequest":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\work\\bi-admin-vue-new\\src\\components\\asset\\FilePicker.vue?vue&type=style&index=0&id=eb359d4e&scoped=true&lang=scss&","dependencies":[{"path":"C:\\work\\bi-admin-vue-new\\src\\components\\asset\\FilePicker.vue","mtime":1552754725221},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\sass-loader\\lib\\loader.js","mtime":1533139052000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.right {\n    text-align: right;\n}\n",{"version":3,"sources":["FilePicker.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6HA;AACA;AACA","file":"FilePicker.vue","sourceRoot":"src/components/asset","sourcesContent":["<template>\r\n    <v-layout row wrap>\r\n        <v-flex xs9>\r\n            <v-btn\r\n                    :loading=\"loading\"\r\n                    @click=\"onPickFile\"\r\n                    :disabled=\"loading\"\r\n                    color=\"blue-grey\"\r\n                    class=\"white--text\"\r\n            >\r\n                {{actionText}}\r\n                <v-icon dark right>cloud_upload</v-icon>\r\n            </v-btn>\r\n            <input type=\"file\" ref=\"input\" hidden name=\"file\" :accept=\"accept\" @change=\"onFilePicked\">\r\n        </v-flex>\r\n        <v-flex xs3 class=\"right\" v-if=\"removable\">\r\n            <v-btn icon flat @click=\"removeImage\" v-if=\"preview\" color=\"error\">\r\n                <v-icon>cancel</v-icon>\r\n            </v-btn>\r\n        </v-flex>\r\n        <v-flex xs12 v-if=\"progress\">\r\n            <v-progress-linear v-model=\"progress\"></v-progress-linear>\r\n        </v-flex>\r\n    </v-layout>\r\n</template>\r\n\r\n<script>\r\n\r\n    const log = require('debug')('launcher:file-picker');\r\n\r\n    export default {\r\n        name    : 'file-picker',\r\n        props   : {\r\n            assetType : {\r\n                type   : String,\r\n                default: 'file'\r\n            },\r\n            label     : {\r\n                type   : String,\r\n                default: 'File'\r\n            },\r\n            actionText: {\r\n                type   : String,\r\n                default: 'Select'\r\n            },\r\n            accept    : {\r\n                type   : String,\r\n                default: '*'\r\n            },\r\n            removable: {\r\n                type: Boolean,\r\n                default: true\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                loading : false,\r\n                image   : null,\r\n                progress: null\r\n            }\r\n        },\r\n        methods : {\r\n            onPickFile() {\r\n                this.removeImage();\r\n                this.$refs.input.click();\r\n            },\r\n            removeImage() {\r\n                this.image = null;\r\n                this.loading = false;\r\n                this.$emit('remove');\r\n            },\r\n            onFilePicked(event) {\r\n                this.loading = true;\r\n                const files  = event.target.files || event.dataTransfer.files;\r\n\r\n                if (files && files[0]) {\r\n                    let filename = files[0].name;\r\n\r\n                    if (filename && filename.lastIndexOf('.') <= 0) {\r\n                        this.loading = false;\r\n                        return;//invalid image\r\n                    }\r\n\r\n                    const fileReader = new FileReader();\r\n\r\n                    fileReader.addEventListener('load', () => {\r\n                        this.image   = fileReader.result;\r\n                        this.loading = false;\r\n                        this.$emit('input', files[0]);\r\n                    });\r\n\r\n                    fileReader.readAsDataURL(files[0]);\r\n\r\n                } else {\r\n                    this.loading = false;\r\n                }\r\n            },\r\n        },\r\n        watch   : {\r\n            image(value) {\r\n                this.$emit('pick', value);\r\n            }\r\n        },\r\n        computed: {\r\n            preview() {\r\n                return this.image;\r\n            }\r\n        },\r\n        created() {\r\n            this.appManager.$on(`progress-${this.assetType}`, value => {\r\n                this.progress = value;\r\n\r\n                if (this.progress) {\r\n                    this.loading = true;\r\n                } else {\r\n                    this.removeImage();\r\n                    this.loading = false;\r\n                }\r\n            });\r\n        }\r\n    };\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped lang=\"scss\">\r\n    .right {\r\n        text-align: right;\r\n    }\r\n</style>\r\n"]}]}