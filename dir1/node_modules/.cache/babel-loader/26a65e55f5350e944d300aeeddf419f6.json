{"remainingRequest":"C:\\work\\bi-admin-vue-new\\node_modules\\thread-loader\\dist\\cjs.js!C:\\work\\bi-admin-vue-new\\node_modules\\babel-loader\\lib\\index.js!C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\work\\bi-admin-vue-new\\src\\components\\application\\Sidebar.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\work\\bi-admin-vue-new\\src\\components\\application\\Sidebar.vue","mtime":1552754725219},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _objectSpread from \"C:\\\\work\\\\bi-admin-vue-new\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport events from '@/app/events';\nimport LocalSettings from '@/app/localSettings';\nimport NavigationList from '@/components/partials/sidebar/NavigationList';\nimport { mapGetters } from 'vuex';\nimport Themes from '../../app/theme';\nimport Environments from '../../const/env';\nimport PermissionHandler from './../../permission/handler';\nimport Env from './../../util/env';\n\nvar log = require('debug')('bi:sidebar');\n\nexport default {\n  name: 'SinglePageAppRootPanel',\n  components: {\n    NavigationList: NavigationList\n  },\n  data: function data() {\n    return {\n      width: 250,\n      drawerIsOpen: true,\n      drawerAlwaysVisible: true\n    };\n  },\n  mounted: function mounted() {\n    this.appManager.$on(events.DRAWER.CLOSE, this.closeDrawer);\n    this.appManager.$on(events.DRAWER.OPEN, this.openDrawer);\n    this.appManager.$on(events.DRAWER.TOGGLE, this.toggleDrawer);\n    this.appManager.$on(events.DRAWER.ALWAYS_VISIBLE, this.makeDrawerAlwaysVisible);\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.appManager.$off(events.DRAWER.CLOSE, this.closeDrawer);\n    this.appManager.$off(events.DRAWER.OPEN, this.openDrawer);\n  },\n  computed: _objectSpread({}, mapGetters('settings', {\n    settings: 'settings'\n  }), mapGetters('user', {\n    user: 'user'\n  }), {\n    themes: function themes() {\n      return Themes;\n    },\n    items: function items() {\n      return this.getItems();\n    }\n  }),\n  methods: {\n    isProductionEnv: function isProductionEnv() {\n      return this.settings.environment === Environments.PRODUCTION;\n    },\n    getEnvironmentName: function getEnvironmentName() {\n      return Env.getFullName(this.settings.environment);\n    },\n    getItems: function getItems(routes) {\n      var _this = this;\n\n      var items = [];\n\n      if (!routes) {\n        routes = this.$router.options.routes;\n      }\n\n      routes.forEach(function (route) {\n        var item = _this.getItem(route);\n\n        var hasPermission = false;\n\n        if (item.permission === true || item.permission === undefined) {\n          hasPermission = true;\n        } else {\n          hasPermission = PermissionHandler.check(_this.user, item.permission);\n        }\n\n        if (item && hasPermission) {\n          items.push(item);\n        }\n      });\n      return items;\n    },\n    getItem: function getItem(route) {\n      var item = false;\n\n      if (route.props && route.props.inMenu === true) {\n        item = {\n          name: route.props.name,\n          icon: route.props.icon,\n          title: this.$t(route.props.title),\n          exact: route.props.exact,\n          permission: route.props.permission\n        };\n\n        if (route.children) {\n          item.items = this.getItems(route.children);\n\n          if ((route.children || !route.children.length) && (!item.items || !item.items.lenght) && !item.name) {\n            item.name = route.children[0].props.name;\n          }\n        }\n      }\n\n      return item;\n    },\n    makeDrawerAlwaysVisible: function makeDrawerAlwaysVisible(alwaysVisible) {\n      this.drawerAlwaysVisible = alwaysVisible;\n    },\n    isAllowed: function isAllowed(permission) {\n      return true;\n    },\n    closeDrawer: function closeDrawer() {\n      if (this.drawerAlwaysVisible) {\n        return;\n      }\n\n      this.drawerIsOpen = false;\n    },\n    openDrawer: function openDrawer() {\n      if (this.drawerAlwaysVisible) {\n        return;\n      }\n\n      this.drawerIsOpen = true;\n    },\n    toggleDrawer: function toggleDrawer() {\n      this.drawerIsOpen = !this.drawerIsOpen;\n    },\n    close: function close() {\n      this.appManager.$emit(events.DRAWER.CLOSE);\n    }\n  },\n  created: function created() {\n    this.drawerAlwaysVisible = LocalSettings.get('drawerAlwaysVisible');\n  }\n};",{"version":3,"sources":["Sidebar.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <div>\r\n        <v-navigation-drawer app dark fixed>\r\n            <v-toolbar :light=\"this.$vuetify.theme.name===themes.YELLOW.name\"\r\n                       :dark=\"this.$vuetify.theme.name!==themes.YELLOW.name\" color=\"primary\" class=\"main-panel-logo\">\r\n                <v-toolbar-title>Navigation</v-toolbar-title>\r\n            </v-toolbar>\r\n            <template v-if=\"this.settings && this.settings.environment\">\r\n                <v-divider></v-divider>\r\n                <div class=\"infoRow\">\r\n                    <v-icon>{{isProductionEnv()?'warning':'info_outline'}}</v-icon>\r\n                    <span title=\"Environment name\" class=\"envLabel\">{{getEnvironmentName()}}</span>\r\n                </div>\r\n            </template>\r\n            <v-divider></v-divider>\r\n            <NavigationList :items=\"items\"/>\r\n        </v-navigation-drawer>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import events from '@/app/events';\r\n    import LocalSettings from '@/app/localSettings';\r\n    import NavigationList from '@/components/partials/sidebar/NavigationList';\r\n    import {mapGetters} from 'vuex';\r\n    import Themes from '../../app/theme';\r\n    import Environments from '../../const/env';\r\n    import PermissionHandler from './../../permission/handler';\r\n    import Env from './../../util/env';\r\n\r\n    const log = require('debug')('bi:sidebar');\r\n\r\n    export default {\r\n        name      : 'SinglePageAppRootPanel',\r\n        components: {NavigationList},\r\n        data() {\r\n            return {\r\n                width              : 250,\r\n                drawerIsOpen       : true,\r\n                drawerAlwaysVisible: true\r\n            }\r\n        },\r\n        mounted() {\r\n            this.appManager.$on(events.DRAWER.CLOSE, this.closeDrawer);\r\n            this.appManager.$on(events.DRAWER.OPEN, this.openDrawer);\r\n            this.appManager.$on(events.DRAWER.TOGGLE, this.toggleDrawer);\r\n            this.appManager.$on(events.DRAWER.ALWAYS_VISIBLE, this.makeDrawerAlwaysVisible);\r\n        },\r\n        beforeDestroy() {\r\n            this.appManager.$off(events.DRAWER.CLOSE, this.closeDrawer);\r\n            this.appManager.$off(events.DRAWER.OPEN, this.openDrawer);\r\n        },\r\n        computed  : {\r\n            ...mapGetters('settings', {\r\n                settings: 'settings'\r\n            }),\r\n            ...mapGetters('user', {\r\n                user: 'user'\r\n            }),\r\n            themes() {\r\n                return Themes;\r\n            },\r\n            items() {\r\n                return this.getItems();\r\n            }\r\n        },\r\n        methods   : {\r\n            isProductionEnv() {\r\n                return this.settings.environment === Environments.PRODUCTION;\r\n            },\r\n            getEnvironmentName() {\r\n                return Env.getFullName(this.settings.environment);\r\n            },\r\n            getItems(routes) {\r\n                let items = [];\r\n\r\n                if (!routes) {\r\n                    routes = this.$router.options.routes;\r\n                }\r\n\r\n                routes.forEach(route => {\r\n                    let item = this.getItem(route);\r\n\r\n                    let hasPermission = false;\r\n                    if ((item.permission === true || item.permission === undefined)) {\r\n                        hasPermission = true;\r\n                    } else {\r\n                        hasPermission = PermissionHandler.check(this.user, item.permission);\r\n                    }\r\n                    if (item && hasPermission) {\r\n                        items.push(item);\r\n                    }\r\n                });\r\n\r\n                return items;\r\n            },\r\n            getItem(route) {\r\n\r\n                let item = false;\r\n\r\n                if (route.props && route.props.inMenu === true) {\r\n                    item = {\r\n                        name      : route.props.name,\r\n                        icon      : route.props.icon,\r\n                        title     : this.$t(route.props.title),\r\n                        exact     : route.props.exact,\r\n                        permission: route.props.permission,\r\n                    }\r\n\r\n                    if (route.children) {\r\n                        item.items = this.getItems(route.children);\r\n\r\n                        if (\r\n                            (route.children || !route.children.length) &&\r\n                            (!item.items || !item.items.lenght) &&\r\n                            !item.name\r\n                        ) {\r\n                            item.name = route.children[0].props.name;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return item;\r\n            },\r\n            makeDrawerAlwaysVisible(alwaysVisible) {\r\n                this.drawerAlwaysVisible = alwaysVisible;\r\n            },\r\n            isAllowed(permission) {\r\n\r\n                return true;\r\n            },\r\n            closeDrawer() {\r\n                if (this.drawerAlwaysVisible) {\r\n                    return;\r\n                }\r\n                this.drawerIsOpen = false;\r\n            },\r\n            openDrawer() {\r\n                if (this.drawerAlwaysVisible) {\r\n                    return;\r\n                }\r\n                this.drawerIsOpen = true;\r\n            },\r\n            toggleDrawer() {\r\n                this.drawerIsOpen = !this.drawerIsOpen;\r\n            },\r\n            close() {\r\n                this.appManager.$emit(events.DRAWER.CLOSE);\r\n            }\r\n        },\r\n        created() {\r\n            this.drawerAlwaysVisible = LocalSettings.get('drawerAlwaysVisible');\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n    .infoRow {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: flex-start;\r\n        margin: 1em;\r\n        color: white;\r\n    }\r\n\r\n    .main-panel-logo {\r\n        background-position: center;\r\n        background-repeat: no-repeat;\r\n        background-size: contain;\r\n    }\r\n\r\n    .envLabel {\r\n        margin-left: 1em;\r\n    }\r\n</style>"],"sourceRoot":"src/components/application"}]}