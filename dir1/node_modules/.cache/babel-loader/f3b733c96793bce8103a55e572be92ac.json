{"remainingRequest":"C:\\work\\bi-admin-vue-new\\node_modules\\thread-loader\\dist\\cjs.js!C:\\work\\bi-admin-vue-new\\node_modules\\babel-loader\\lib\\index.js!C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\work\\bi-admin-vue-new\\src\\components\\table\\simpleTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\work\\bi-admin-vue-new\\src\\components\\table\\simpleTable.vue","mtime":1552754725268},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport events from './../../table/events';\nimport SimpleTableSortOrder from './../../table/sortOrder';\nimport TableActions from './actions.vue';\nimport SimpleTableCellTextWidget from './cellWidget/text.vue';\n\nvar log = require('debug')('bi-admin-vue:simple-table');\n\nexport default {\n  components: {\n    TableActions: TableActions,\n    SimpleTableCellTextWidget: SimpleTableCellTextWidget\n  },\n  data: function data() {\n    return {\n      hiddenColumns: [],\n      columns: [],\n      totalItems: 0,\n      rows: [],\n      selectable: false,\n      selected: [],\n      multiSelect: false,\n      pagination: {},\n      loading: false\n    };\n  },\n  computed: {\n    visibleColumns: function visibleColumns() {\n      var _this = this;\n\n      var visible = this.columns.filter(function (column) {\n        return _this.hiddenColumns.indexOf(column.name) === -1;\n      }).map(function (column) {\n        //mapper from our format to vuetify column format\n        column.text = column.title;\n        column.value = column.name;\n        return column;\n      });\n      visible.push({\n        text: 'Actions',\n        sortable: false,\n        align: 'center',\n        value: 'actions'\n      });\n      return visible;\n    },\n    optionalColumns: function optionalColumns() {\n      return this.columns.filter(function (column) {\n        return column.optional === true;\n      });\n    }\n  },\n  props: {\n    rowsPerPageItems: {\n      type: Array,\n      default: function _default() {\n        return [5, 10, 25, {\n          text: 'All',\n          value: -1\n        }];\n      }\n    },\n    detailPageName: {\n      type: String\n    },\n    controller: {\n      //TODO\n      type: Object,\n      default: function _default() {\n        return null;\n      }\n    }\n  },\n  watch: {\n    pagination: function pagination(_pagination) {\n      this.controller.setPagination(_pagination);\n    }\n  },\n  methods: {\n    paginationUpdate: function paginationUpdate(pagination) {},\n    toggleColumnVisible: function toggleColumnVisible(columnName) {\n      this.controller.toggleColumnVisible(columnName);\n    },\n    getVisibleColumns: function getVisibleColumns() {\n      var _this2 = this;\n\n      return this.columns.filter(function (column) {\n        return _this2.hiddenColumns.indexOf(column.value === -1);\n      });\n    },\n    onDataLoading: function onDataLoading() {\n      this.loading = true;\n    },\n    onDataReceived: function onDataReceived(result) {\n      this.loading = false;\n      log('table data received', result);\n      this.rows = result.data.rows;\n      this.pagination.totalItems = result.data.count;\n      this.totalItems = result.data.count;\n    },\n    reload: function reload() {\n      this.controller.loadData();\n    },\n    onColumnVisibilityChnaged: function onColumnVisibilityChnaged() {\n      this.hiddenColumns = this.controller.configuration.hiddenColumns;\n    }\n  },\n  mounted: function mounted() {\n    if (!this.controller) {\n      log(\"Table \".concat(this.name, \" doesn't have a controller.\"));\n      return;\n    }\n\n    this.pagination.rowsPerPage = this.controller.configuration.rowsPerPage;\n    this.pagination.sortBy = this.controller.configuration.sortBy;\n    this.pagination.descending = this.controller.configuration.sortOrder === SimpleTableSortOrder.DESCENDING;\n    this.selectable = this.controller.configuration.selectable;\n    this.multiSelect = this.controller.configuration.multiSelect;\n    this.columns = this.controller.configuration.columns;\n    this.hiddenColumns = this.controller.configuration.hiddenColumns;\n    this.controller.$on(events.DATA_LOADING, this.onDataLoading);\n    this.controller.$on(events.DATA_RECEIVED, this.onDataReceived);\n    this.controller.$on(events.COLUMN_VISIBILITY_CHANGED, this.onColumnVisibilityChnaged);\n    this.reload();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.controller.$off(events.DATA_LOADING, this.onDataLoading);\n    this.controller.$off(events.DATA_RECEIVED, this.onDataReceived);\n    this.controller.$off(events.COLUMN_VISIBILITY_CHANGED, this.onColumnVisibilityChnaged);\n  }\n};",{"version":3,"sources":["simpleTable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuFA,OAAA,MAAA,MAAA,sBAAA;AACA,OAAA,oBAAA,MAAA,yBAAA;AACA,OAAA,YAAA,MAAA,eAAA;AACA,OAAA,yBAAA,MAAA,uBAAA;;AAEA,IAAA,GAAA,GAAA,OAAA,CAAA,OAAA,CAAA,CAAA,2BAAA,CAAA;;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,YAAA,EAAA,YADA;AACA,IAAA,yBAAA,EAAA;AADA,GADA;AAIA,EAAA,IAJA,kBAIA;AACA,WAAA;AACA,MAAA,aAAA,EAAA,EADA;AAEA,MAAA,OAAA,EAAA,EAFA;AAGA,MAAA,UAAA,EAAA,CAHA;AAIA,MAAA,IAAA,EAAA,EAJA;AAKA,MAAA,UAAA,EAAA,KALA;AAMA,MAAA,QAAA,EAAA,EANA;AAOA,MAAA,WAAA,EAAA,KAPA;AAQA,MAAA,UAAA,EAAA,EARA;AASA,MAAA,OAAA,EAAA;AATA,KAAA;AAWA,GAhBA;AAiBA,EAAA,QAAA,EAAA;AACA,IAAA,cADA,4BACA;AAAA;;AAEA,UAAA,OAAA,GAAA,KAAA,OAAA,CAAA,MAAA,CAAA,UAAA,MAAA,EAAA;AACA,eAAA,KAAA,CAAA,aAAA,CAAA,OAAA,CAAA,MAAA,CAAA,IAAA,MAAA,CAAA,CAAA;AACA,OAFA,EAGA,GAHA,CAGA,UAAA,MAAA,EAAA;AAAA;AACA,QAAA,MAAA,CAAA,IAAA,GAAA,MAAA,CAAA,KAAA;AACA,QAAA,MAAA,CAAA,KAAA,GAAA,MAAA,CAAA,IAAA;AACA,eAAA,MAAA;AACA,OAPA,CAAA;AASA,MAAA,OAAA,CAAA,IAAA,CAAA;AACA,QAAA,IAAA,EAAA,SADA;AAEA,QAAA,QAAA,EAAA,KAFA;AAGA,QAAA,KAAA,EAAA,QAHA;AAIA,QAAA,KAAA,EAAA;AAJA,OAAA;AAOA,aAAA,OAAA;AACA,KApBA;AAqBA,IAAA,eArBA,6BAqBA;AACA,aAAA,KAAA,OAAA,CAAA,MAAA,CAAA,UAAA,MAAA,EAAA;AACA,eAAA,MAAA,CAAA,QAAA,KAAA,IAAA;AACA,OAFA,CAAA;AAGA;AAzBA,GAjBA;AA4CA,EAAA,KAAA,EAAA;AACA,IAAA,gBAAA,EAAA;AACA,MAAA,IAAA,EAAA,KADA;AAEA,MAAA,OAAA,EAAA,oBAAA;AACA,eAAA,CAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA;AAAA,UAAA,IAAA,EAAA,KAAA;AAAA,UAAA,KAAA,EAAA,CAAA;AAAA,SAAA,CAAA;AACA;AAJA,KADA;AAOA,IAAA,cAAA,EAAA;AACA,MAAA,IAAA,EAAA;AADA,KAPA;AAUA,IAAA,UAAA,EAAA;AAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAAA,eAAA,IAAA;AAAA;AAFA;AAVA,GA5CA;AA2DA,EAAA,KAAA,EAAA;AACA,IAAA,UADA,sBACA,WADA,EACA;AACA,WAAA,UAAA,CAAA,aAAA,CAAA,WAAA;AACA;AAHA,GA3DA;AAgEA,EAAA,OAAA,EAAA;AACA,IAAA,gBADA,4BACA,UADA,EACA,CAEA,CAHA;AAIA,IAAA,mBAJA,+BAIA,UAJA,EAIA;AACA,WAAA,UAAA,CAAA,mBAAA,CAAA,UAAA;AACA,KANA;AAOA,IAAA,iBAPA,+BAOA;AAAA;;AACA,aAAA,KAAA,OAAA,CAAA,MAAA,CAAA,UAAA,MAAA,EAAA;AACA,eAAA,MAAA,CAAA,aAAA,CAAA,OAAA,CAAA,MAAA,CAAA,KAAA,KAAA,CAAA,CAAA,CAAA;AACA,OAFA,CAAA;AAGA,KAXA;AAYA,IAAA,aAZA,2BAYA;AACA,WAAA,OAAA,GAAA,IAAA;AACA,KAdA;AAeA,IAAA,cAfA,0BAeA,MAfA,EAeA;AACA,WAAA,OAAA,GAAA,KAAA;AACA,MAAA,GAAA,CAAA,qBAAA,EAAA,MAAA,CAAA;AACA,WAAA,IAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA;AACA,WAAA,UAAA,CAAA,UAAA,GAAA,MAAA,CAAA,IAAA,CAAA,KAAA;AACA,WAAA,UAAA,GAAA,MAAA,CAAA,IAAA,CAAA,KAAA;AACA,KArBA;AAsBA,IAAA,MAtBA,oBAsBA;AACA,WAAA,UAAA,CAAA,QAAA;AACA,KAxBA;AAyBA,IAAA,yBAzBA,uCAyBA;AACA,WAAA,aAAA,GAAA,KAAA,UAAA,CAAA,aAAA,CAAA,aAAA;AACA;AA3BA,GAhEA;AA6FA,EAAA,OA7FA,qBA6FA;AACA,QAAA,CAAA,KAAA,UAAA,EAAA;AACA,MAAA,GAAA,iBAAA,KAAA,IAAA,iCAAA;AACA;AACA;;AAEA,SAAA,UAAA,CAAA,WAAA,GAAA,KAAA,UAAA,CAAA,aAAA,CAAA,WAAA;AACA,SAAA,UAAA,CAAA,MAAA,GAAA,KAAA,UAAA,CAAA,aAAA,CAAA,MAAA;AACA,SAAA,UAAA,CAAA,UAAA,GAAA,KAAA,UAAA,CAAA,aAAA,CAAA,SAAA,KAAA,oBAAA,CAAA,UAAA;AACA,SAAA,UAAA,GAAA,KAAA,UAAA,CAAA,aAAA,CAAA,UAAA;AACA,SAAA,WAAA,GAAA,KAAA,UAAA,CAAA,aAAA,CAAA,WAAA;AACA,SAAA,OAAA,GAAA,KAAA,UAAA,CAAA,aAAA,CAAA,OAAA;AACA,SAAA,aAAA,GAAA,KAAA,UAAA,CAAA,aAAA,CAAA,aAAA;AACA,SAAA,UAAA,CAAA,GAAA,CAAA,MAAA,CAAA,YAAA,EAAA,KAAA,aAAA;AACA,SAAA,UAAA,CAAA,GAAA,CAAA,MAAA,CAAA,aAAA,EAAA,KAAA,cAAA;AACA,SAAA,UAAA,CAAA,GAAA,CAAA,MAAA,CAAA,yBAAA,EAAA,KAAA,yBAAA;AACA,SAAA,MAAA;AACA,GA9GA;AA+GA,EAAA,aA/GA,2BA+GA;AACA,SAAA,UAAA,CAAA,IAAA,CAAA,MAAA,CAAA,YAAA,EAAA,KAAA,aAAA;AACA,SAAA,UAAA,CAAA,IAAA,CAAA,MAAA,CAAA,aAAA,EAAA,KAAA,cAAA;AACA,SAAA,UAAA,CAAA,IAAA,CAAA,MAAA,CAAA,yBAAA,EAAA,KAAA,yBAAA;AACA;AAnHA,CAAA","sourcesContent":["<template>\r\n    <div>\r\n        <v-card class=\"elevation-2\">\r\n            <v-layout row>\r\n                <v-spacer/>\r\n                <div class=\"shrinkedFlexDiv\">\r\n                    <v-btn flat icon @click=\"reload()\">\r\n                        <v-icon>autorenew</v-icon>\r\n                    </v-btn>\r\n                    <v-menu bottom left :disabled=\"!(pagination.totalItems>0)\">\r\n                        <v-btn icon slot=\"activator\">\r\n                            <v-icon>settings</v-icon>\r\n                        </v-btn>\r\n                        <v-list>\r\n                            <v-list-tile>\r\n                                <v-list-tile-action>\r\n                                    <v-icon>remove_red_eye</v-icon>\r\n                                </v-list-tile-action>\r\n                                <v-list-tile-content>\r\n                                    <v-list-tile-title>Visible columns</v-list-tile-title>\r\n                                </v-list-tile-content>\r\n                            </v-list-tile>\r\n                            <template v-if=\"optionalColumns && optionalColumns.length\">\r\n                                <v-divider/>\r\n                                <v-list-tile :key=\"index\"\r\n                                             @click=\"toggleColumnVisible(column.name)\"\r\n                                             v-for=\"(column, index) in optionalColumns\">\r\n                                    <v-list-tile-action>\r\n                                        <v-icon>{{hiddenColumns.indexOf(column.name) > -1 ? 'close' : 'check'}}</v-icon>\r\n                                    </v-list-tile-action>\r\n                                    <v-list-tile-content>\r\n                                        <v-list-tile-title>{{column.title}}</v-list-tile-title>\r\n                                    </v-list-tile-content>\r\n                                </v-list-tile>\r\n                            </template>\r\n                        </v-list>\r\n                    </v-menu>\r\n                </div>\r\n            </v-layout>\r\n            <v-data-table v-model=\"selected\"\r\n                          :headers=\"visibleColumns\"\r\n                          :items=\"rows\"\r\n                          :rowsPerPageItems=\"rowsPerPageItems\"\r\n                          :must-sort=\"true\"\r\n                          :disable-initial-sort=\"true\"\r\n                          :total-items=\"totalItems\"\r\n                          :select-all=\"selectable\"\r\n                          :loading=\"loading\"\r\n                          :pagination.sync=\"pagination\"\r\n                          @pagination=\"paginationUpdate\"\r\n            >\r\n                <template slot=\"items\" slot-scope=\"props\">\r\n                    <td v-if=\"selectable\">\r\n                        <v-checkbox\r\n                                primary\r\n                                hide-details\r\n                                v-model=\"selected\"\r\n                        ></v-checkbox>\r\n                    </td>\r\n                    <td v-for=\"(column, index) in visibleColumns\" v-if=\"column.value != 'actions'\">\r\n\r\n                        <component v-if=\"column.widget\"\r\n                                   :controller=\"controller\"\r\n                                   :is=\"column.widget\"\r\n                                   :column=\"column\"\r\n                                   :row=\"props.item\"\r\n                                   v-bind=\"column.options\"/>\r\n                        <SimpleTableCellTextWidget v-else\r\n                                                   :controller=\"controller\"\r\n                                                   :column=\"column\"\r\n                                                   :row=\"props.item\"\r\n                                                   v-bind=\"column.options\"/>\r\n                    </td>\r\n                    <td class=\"text-xs-center\">\r\n                        <slot name=\"actions\" :item=\"props.item\" v-if=\"props.item\">\r\n                            <v-btn v-if=\"detailPageName\" icon\r\n                                   :to=\"{name : detailPageName, params : {id : props.item.id}}\">\r\n                                <v-icon>info_outline</v-icon>\r\n                            </v-btn>\r\n                        </slot>\r\n                    </td>\r\n                </template>\r\n            </v-data-table>\r\n        </v-card>\r\n    </div>\r\n</template>\r\n<script>\r\n    import events from './../../table/events';\r\n    import SimpleTableSortOrder from './../../table/sortOrder';\r\n    import TableActions from './actions.vue';\r\n    import SimpleTableCellTextWidget from './cellWidget/text.vue';\r\n\r\n    const log = require('debug')('bi-admin-vue:simple-table');\r\n\r\n    export default {\r\n        components: {\r\n            TableActions, SimpleTableCellTextWidget\r\n        },\r\n        data() {\r\n            return {\r\n                hiddenColumns: [],\r\n                columns      : [],\r\n                totalItems   : 0,\r\n                rows         : [],\r\n                selectable   : false,\r\n                selected     : [],\r\n                multiSelect  : false,\r\n                pagination   : {},\r\n                loading      : false\r\n            }\r\n        },\r\n        computed  : {\r\n            visibleColumns() {\r\n\r\n                let visible = this.columns.filter((column) => {\r\n                    return this.hiddenColumns.indexOf(column.name) === -1;\r\n                })\r\n                    .map((column) => { //mapper from our format to vuetify column format\r\n                        column.text = column.title;\r\n                        column.value = column.name;\r\n                        return column;\r\n                    });\r\n\r\n                visible.push({\r\n                    text    : 'Actions',\r\n                    sortable: false,\r\n                    align   : 'center',\r\n                    value   : 'actions'\r\n                });\r\n\r\n                return visible;\r\n            },\r\n            optionalColumns() {\r\n                return this.columns.filter((column) => {\r\n                    return column.optional === true;\r\n                });\r\n            }\r\n        },\r\n        props     : {\r\n            rowsPerPageItems: {\r\n                type   : Array,\r\n                default: () => {\r\n                    return [5, 10, 25, {text: 'All', value: -1}]\r\n                }\r\n            },\r\n            detailPageName  : {\r\n                type: String\r\n            },\r\n            controller      : { //TODO\r\n                type   : Object,\r\n                default: () => null\r\n            }\r\n        },\r\n        watch     : {\r\n            pagination(pagination) {\r\n                this.controller.setPagination(pagination);\r\n            }\r\n        },\r\n        methods   : {\r\n            paginationUpdate(pagination) {\r\n\r\n            },\r\n            toggleColumnVisible(columnName) {\r\n                this.controller.toggleColumnVisible(columnName);\r\n            },\r\n            getVisibleColumns() {\r\n                return this.columns.filter((column) => {\r\n                    return this.hiddenColumns.indexOf(column.value === -1);\r\n                })\r\n            },\r\n            onDataLoading() {\r\n                this.loading = true;\r\n            },\r\n            onDataReceived(result) {\r\n                this.loading = false;\r\n                log('table data received', result);\r\n                this.rows = result.data.rows;\r\n                this.pagination.totalItems = result.data.count;\r\n                this.totalItems = result.data.count;\r\n            },\r\n            reload() {\r\n                this.controller.loadData();\r\n            },\r\n            onColumnVisibilityChnaged() {\r\n                this.hiddenColumns = this.controller.configuration.hiddenColumns;\r\n            }\r\n        },\r\n        mounted() {\r\n            if (!this.controller) {\r\n                log(`Table ${this.name} doesn't have a controller.`);\r\n                return;\r\n            }\r\n\r\n            this.pagination.rowsPerPage = this.controller.configuration.rowsPerPage;\r\n            this.pagination.sortBy = this.controller.configuration.sortBy;\r\n            this.pagination.descending = this.controller.configuration.sortOrder === SimpleTableSortOrder.DESCENDING;\r\n            this.selectable = this.controller.configuration.selectable;\r\n            this.multiSelect = this.controller.configuration.multiSelect;\r\n            this.columns = this.controller.configuration.columns;\r\n            this.hiddenColumns = this.controller.configuration.hiddenColumns;\r\n            this.controller.$on(events.DATA_LOADING, this.onDataLoading);\r\n            this.controller.$on(events.DATA_RECEIVED, this.onDataReceived);\r\n            this.controller.$on(events.COLUMN_VISIBILITY_CHANGED, this.onColumnVisibilityChnaged);\r\n            this.reload();\r\n        },\r\n        beforeDestroy() {\r\n            this.controller.$off(events.DATA_LOADING, this.onDataLoading);\r\n            this.controller.$off(events.DATA_RECEIVED, this.onDataReceived);\r\n            this.controller.$off(events.COLUMN_VISIBILITY_CHANGED, this.onColumnVisibilityChnaged);\r\n        }\r\n    }\r\n</script>\r\n<style scoped>\r\n    .shrinkedFlexDiv {\r\n        flex: 0 0 auto;\r\n    }\r\n</style>"],"sourceRoot":"src/components/table"}]}