{"remainingRequest":"C:\\work\\bi-admin-vue-new\\node_modules\\thread-loader\\dist\\cjs.js!C:\\work\\bi-admin-vue-new\\node_modules\\babel-loader\\lib\\index.js!C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\work\\bi-admin-vue-new\\src\\components\\editor\\imageBrowser\\imageUploaderDialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\work\\bi-admin-vue-new\\src\\components\\editor\\imageBrowser\\imageUploaderDialog.vue","mtime":1552754725228},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport TableController from '../../../table/controller';\nimport SimpleTableSortOrder from '../../../table/sortOrder';\nimport SimpleTableFilterTextFilter from '../../table/filter/SimpleTableFilterTextFilter';\nimport ImagePreviewTableCellWidget from './previewWidget'; // FilePond plugins\n\nimport FilePondPluginFileValidateType from 'filepond-plugin-file-validate-type';\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview';\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.css';\nimport 'filepond/dist/filepond.min.css';\nimport vueFilePond from 'vue-filepond';\nvar FilePond = vueFilePond(FilePondPluginFileValidateType, FilePondPluginImagePreview);\nexport default {\n  name: 'ImageUploaderDialog',\n  components: {\n    FilePond: FilePond\n  },\n  props: {\n    visible: {\n      type: Boolean,\n      default: false\n    },\n    images: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    imagesListResource: {\n      type: Object,\n      default: function _default() {\n        null;\n      }\n    },\n    uploadUrl: {\n      type: String\n    },\n    type: {\n      type: String,\n      default: 'picture'\n    }\n  },\n  data: function data() {\n    return {\n      dialogVisible: this.visible,\n      uploaderPickedImages: [],\n      uploadVisible: false\n    };\n  },\n  watch: {\n    visible: function visible() {\n      this.dialogVisible = this.visible;\n    },\n    dialogVisible: function dialogVisible() {\n      var _this = this;\n\n      if (this.dialogVisible) {\n        this.uploaderPickedImages = [];\n        this.images.forEach(function (element) {\n          _this.uploaderPickedImages.push(element);\n        });\n      } else {\n        this.closeDialog();\n      }\n    }\n  },\n  methods: {\n    closeDialog: function closeDialog() {\n      this.$emit('close', this.images);\n    },\n    done: function done() {\n      this.$emit('close', this.uploaderPickedImages);\n    },\n    isSelected: function isSelected(image) {\n      for (var i = 0; i < this.uploaderPickedImages.length; i++) {\n        if (image.code === this.uploaderPickedImages[i].code) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    addImage: function addImage(image) {\n      if (this.type == 'picture') {\n        this.uploaderPickedImages.pop();\n      }\n\n      if (this.type == 'comparsion' && this.uploaderPickedImages.length > 1) {\n        this.uploaderPickedImages.pop();\n      }\n\n      image.title = '';\n      image.description = '';\n      image.alt = '';\n      image.lightbox = false;\n      this.uploaderPickedImages.push(image);\n    },\n    removeImage: function removeImage(image) {\n      if (this.type != 'picture') {\n        for (var i = 0; i < this.uploaderPickedImages.length; i++) {\n          if (image.code === this.uploaderPickedImages[i].code) {\n            this.uploaderPickedImages.splice(i, 1);\n          }\n        }\n      } else {\n        this.uploaderPickedImages.pop();\n      }\n    },\n    // file pond upload\n    enableUpload: function enableUpload() {\n      this.uploadVisible = true;\n    },\n    onFileUploaded: function onFileUploaded(err, info) {\n      var _this2 = this;\n\n      this.$broadcast('success', \"File \".concat(info.file.name, \" uploaded\"));\n      this.tableController.loadData(); //and clear uploaded files list after a while\n\n      setTimeout(function () {\n        _this2.uploadVisible = false;\n      }, 2000);\n    }\n  },\n  computed: {\n    valid: function valid() {\n      return this.uploaderPickedImages.length > 0;\n    },\n    tableController: function tableController() {\n      return new TableController({\n        identifier: 'image-browser-dialog',\n        rowsPerPage: 5,\n        sortBy: 'created_at',\n        sortOrder: SimpleTableSortOrder.DESCENDING,\n        columns: [{\n          name: 'code',\n          title: 'Preview',\n          sortable: false,\n          optional: true,\n          widget: ImagePreviewTableCellWidget\n        }]\n      }, this.imagesListResource);\n    }\n  }\n};",{"version":3,"sources":["imageUploaderDialog.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <v-dialog\r\n        ref=\"dialog\"\r\n        v-model=\"dialogVisible\"\r\n        content-class=\"image-uploader\"\r\n        min-width=\"90vw\"\r\n        min-height=\"90vh\"\r\n        scrollable\r\n    >\r\n        <v-card>\r\n            <v-toolbar dark color=\"primary\">\r\n                <v-toolbar-title>Image uploader {{ type.toUpperCase() }}</v-toolbar-title>\r\n                <v-spacer></v-spacer>\r\n                <v-btn icon dark @click.native=\"closeDialog\">\r\n                    <v-icon>close</v-icon>\r\n                </v-btn>\r\n            </v-toolbar>\r\n            <v-card-text>\r\n                <v-btn v-if=\"!uploadVisible\" color=\"success\" @click=\"enableUpload\">Upload</v-btn>\r\n                <file-pond\r\n                    v-if=\"uploadVisible\"\r\n                    name=\"file\"\r\n                    ref=\"pond\"\r\n                    label-idle=\"Drop files here...\"\r\n                    allow-multiple=\"false\"\r\n                    accepted-file-types=\"image/jpeg, image/png\"\r\n                    :server=\"uploadUrl\"\r\n                    @processfile=\"onFileUploaded\"\r\n                />\r\n                <SimpleTable :controller=\"tableController\">\r\n                    <template slot=\"actions\" slot-scope=\"props\">\r\n                        <v-btn\r\n                            :color=\"isSelected(props.item) ? 'error' : 'success'\" title=\"Pick\"\r\n                            @click=\"() => { \r\n                                isSelected(props.item) ? removeImage(props.item) : addImage(props.item)\r\n                            }\">\r\n                            {{ isSelected(props.item) ? 'Remove' : 'Add' }}\r\n                        </v-btn>\r\n                    </template>\r\n                </SimpleTable>\r\n            </v-card-text>\r\n\r\n            <v-alert\r\n                :value=\"true\"\r\n                type=\"error\"\r\n                v-if=\"!valid\"\r\n                class=\"alert\"\r\n            >\r\n                At least one image is required\r\n            </v-alert>\r\n\r\n            <v-card-actions>\r\n                <v-btn flat @click=\"closeDialog\">Cancel</v-btn>\r\n                <v-btn color=\"blue darken-1\" flat @click=\"done\" v-if=\"valid\">Finish picking</v-btn>\r\n                <v-btn color=\"blue darken-1\" flat v-else disabled>Finish picking</v-btn>\r\n            </v-card-actions>\r\n        </v-card>\r\n    </v-dialog>\r\n</template>\r\n<script>\r\n    import TableController from '../../../table/controller';\r\n    import SimpleTableSortOrder from '../../../table/sortOrder';\r\n    import SimpleTableFilterTextFilter from '../../table/filter/SimpleTableFilterTextFilter';\r\n    import ImagePreviewTableCellWidget from './previewWidget';\r\n\r\n    // FilePond plugins\r\n    import FilePondPluginFileValidateType from 'filepond-plugin-file-validate-type';\r\n    import FilePondPluginImagePreview from 'filepond-plugin-image-preview';\r\n    import 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.css';\r\n    import 'filepond/dist/filepond.min.css';\r\n    import vueFilePond from 'vue-filepond';\r\n    const FilePond = vueFilePond(FilePondPluginFileValidateType, FilePondPluginImagePreview);\r\n\r\n    export default {\r\n        name        : 'ImageUploaderDialog',\r\n        components  : {\r\n            FilePond\r\n        },\r\n        props       : {\r\n            visible             : {\r\n                type    : Boolean,\r\n                default : false\r\n            },\r\n            images              : {\r\n                type    : Array,\r\n                default : () => {\r\n                    return [];\r\n                }\r\n            },\r\n            imagesListResource  : {\r\n                type    : Object,\r\n                default : () => {\r\n                    null\r\n                }\r\n            },\r\n            uploadUrl           : {\r\n                type    : String\r\n            },\r\n            type                : {\r\n                type    : String,\r\n                default : 'picture'\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                dialogVisible       : this.visible,\r\n                uploaderPickedImages: [],\r\n                uploadVisible       : false\r\n            }\r\n        },\r\n        watch: {\r\n            visible() {\r\n                this.dialogVisible = this.visible;\r\n            },\r\n            dialogVisible() {\r\n                if (this.dialogVisible) {\r\n                    this.uploaderPickedImages = [];\r\n                    this.images.forEach(element => {\r\n                        this.uploaderPickedImages.push(element);\r\n                    });\r\n                } else {\r\n                    this.closeDialog();\r\n                }\r\n            }\r\n        },\r\n        methods : {\r\n            closeDialog() {\r\n                this.$emit('close', this.images);\r\n            },\r\n            done() {\r\n                this.$emit('close', this.uploaderPickedImages);\r\n            },\r\n\r\n            isSelected(image) {\r\n                for (let i = 0; i < this.uploaderPickedImages.length; i++) {\r\n                    if (image.code === this.uploaderPickedImages[i].code) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            },\r\n            \r\n            addImage(image) {\r\n                if (this.type == 'picture') {\r\n                    this.uploaderPickedImages.pop();\r\n                }\r\n                if ((this.type == 'comparsion') && (this.uploaderPickedImages.length > 1)) {\r\n                    this.uploaderPickedImages.pop();\r\n                }\r\n                image.title         = '';\r\n                image.description   = '';\r\n                image.alt           = '';\r\n                image.lightbox      = false;\r\n                this.uploaderPickedImages.push(image);\r\n            },\r\n            removeImage(image) {\r\n                if (this.type != 'picture') {\r\n                    for (let i = 0; i < this.uploaderPickedImages.length; i++) {\r\n                        if (image.code === this.uploaderPickedImages[i].code) {\r\n                            this.uploaderPickedImages.splice(i, 1);\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.uploaderPickedImages.pop();\r\n                }\r\n            },\r\n\r\n            // file pond upload\r\n            enableUpload() {\r\n                this.uploadVisible = true;\r\n            },\r\n            onFileUploaded(err, info) {\r\n                this.$broadcast('success', `File ${info.file.name} uploaded`);\r\n                this.tableController.loadData();\r\n                //and clear uploaded files list after a while\r\n                setTimeout(() => {\r\n                    this.uploadVisible = false;\r\n                }, 2000)\r\n            }\r\n        },\r\n        computed: {\r\n            valid() {\r\n                return (this.uploaderPickedImages.length > 0);\r\n            },\r\n            tableController() {\r\n                return new TableController({\r\n                        identifier : 'image-browser-dialog',\r\n                        rowsPerPage: 5,\r\n                        sortBy     : 'created_at',\r\n                        sortOrder  : SimpleTableSortOrder.DESCENDING,\r\n                        columns    : [\r\n                            {\r\n                                name    : 'code',\r\n                                title   : 'Preview',\r\n                                sortable: false,\r\n                                optional: true,\r\n                                widget  : ImagePreviewTableCellWidget\r\n                            }\r\n                        ]\r\n                    },\r\n                    this.imagesListResource\r\n                )\r\n            }\r\n        }\r\n    }\r\n</script>\r\n<style scoped lang=\"scss\">\r\n    .image-picker {\r\n        z-index: 10000 !important;\r\n    }\r\n    \r\n    .alert {\r\n        width: 100%;\r\n    }\r\n</style>"],"sourceRoot":"src/components/editor/imageBrowser"}]}