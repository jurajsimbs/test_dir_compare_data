{"remainingRequest":"C:\\work\\bi-admin-vue-new\\node_modules\\babel-loader\\lib\\index.js!C:\\work\\bi-admin-vue-new\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\work\\bi-admin-vue-new\\src\\store\\modules\\languages.js","dependencies":[{"path":"C:\\work\\bi-admin-vue-new\\src\\store\\modules\\languages.js","mtime":1552754725292},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\work\\\\bi-admin-vue-new\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"C:\\\\work\\\\bi-admin-vue-new\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\work\\\\bi-admin-vue-new\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nimport debug from 'debug';\nimport * as types from '../mutation-types';\nimport languageCodes from './../../const/languageCodes';\nimport languageNames from './../../const/languages';\nimport ApplicationError from './../../error/applicationError';\nvar log = debug('bi-admin-vue:store:languages');\nexport default {\n  build: function build(Vue, LanguagesResource) {\n    var state = {\n      data: null\n    };\n    var getters = {\n      availableLanguages: function availableLanguages(state) {\n        return _objectSpread(_defineProperty({}, languageCodes.ENGLISH, {\n          code: languageCodes.ENGLISH,\n          name: languageNames[languageCodes.ENGLISH]\n        }), state.data);\n      }\n    };\n    var actions = {\n      getLanguages: function () {\n        var _getLanguages = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee(_ref) {\n          var commit, state, response;\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  commit = _ref.commit, state = _ref.state;\n\n                  if (LanguagesResource) {\n                    _context.next = 3;\n                    break;\n                  }\n\n                  throw new ApplicationError('No languages available');\n\n                case 3:\n                  _context.next = 5;\n                  return LanguagesResource.get();\n\n                case 5:\n                  response = _context.sent;\n                  commit(types.RECEIVE_LANGUAGES, response.data);\n                  log('Languages data loaded:', response.data);\n\n                case 8:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        function getLanguages(_x) {\n          return _getLanguages.apply(this, arguments);\n        }\n\n        return getLanguages;\n      }()\n    };\n\n    var mutations = _defineProperty({}, types.RECEIVE_LANGUAGES, function (state, val) {\n      Vue.set(state, 'data', val);\n    });\n\n    return {\n      namespaced: true,\n      state: state,\n      actions: actions,\n      getters: getters,\n      mutations: mutations\n    };\n  }\n};",{"version":3,"sources":["C:\\work\\bi-admin-vue-new\\src\\store\\modules\\languages.js"],"names":["debug","types","languageCodes","languageNames","ApplicationError","log","build","Vue","LanguagesResource","state","data","getters","availableLanguages","ENGLISH","code","name","actions","getLanguages","commit","get","response","RECEIVE_LANGUAGES","mutations","val","set","namespaced"],"mappings":"AAAA;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,mBAAvB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,OAAOC,gBAAP,MAA6B,gCAA7B;AAEA,IAAMC,GAAG,GAAGL,KAAK,CAAC,8BAAD,CAAjB;AAEA,eAAe;AACXM,EAAAA,KADW,iBACLC,GADK,EACAC,iBADA,EACmB;AAC1B,QAAIC,KAAK,GAAG;AACRC,MAAAA,IAAI,EAAE;AADE,KAAZ;AAIA,QAAIC,OAAO,GAAG;AACVC,MAAAA,kBAAkB,EAAE,4BAACH,KAAD,EAAW;AAC3B,iDACKP,aAAa,CAACW,OADnB,EAC6B;AACrBC,UAAAA,IAAI,EAAEZ,aAAa,CAACW,OADC;AAErBE,UAAAA,IAAI,EAAEZ,aAAa,CAACD,aAAa,CAACW,OAAf;AAFE,SAD7B,GAKOJ,KAAK,CAACC,IALb;AAOH;AATS,KAAd;AAYA,QAAIM,OAAO,GAAG;AACJC,MAAAA,YADI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,kBAAAA,MADV,QACUA,MADV,EACkBT,KADlB,QACkBA,KADlB;;AAAA,sBAEDD,iBAFC;AAAA;AAAA;AAAA;;AAAA,wBAGI,IAAIJ,gBAAJ,CAAqB,wBAArB,CAHJ;;AAAA;AAAA;AAAA,yBAKeI,iBAAiB,CAACW,GAAlB,EALf;;AAAA;AAKFC,kBAAAA,QALE;AAMNF,kBAAAA,MAAM,CAACjB,KAAK,CAACoB,iBAAP,EAA0BD,QAAQ,CAACV,IAAnC,CAAN;AACAL,kBAAAA,GAAG,CAAC,wBAAD,EAA2Be,QAAQ,CAACV,IAApC,CAAH;;AAPM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,KAAd;;AAWA,QAAIY,SAAS,uBACRrB,KAAK,CAACoB,iBADE,YACiBZ,KADjB,EACwBc,GADxB,EAC6B;AAClChB,MAAAA,GAAG,CAACiB,GAAJ,CAAQf,KAAR,EAAe,MAAf,EAAuBc,GAAvB;AACH,KAHQ,CAAb;;AAMA,WAAO;AACHE,MAAAA,UAAU,EAAE,IADT;AAEHhB,MAAAA,KAAK,EAALA,KAFG;AAGHO,MAAAA,OAAO,EAAPA,OAHG;AAIHL,MAAAA,OAAO,EAAPA,OAJG;AAKHW,MAAAA,SAAS,EAATA;AALG,KAAP;AAOH;AA1CU,CAAf","sourcesContent":["\"use strict\";\r\nimport debug from 'debug';\r\nimport * as types from '../mutation-types';\r\nimport languageCodes from './../../const/languageCodes';\r\nimport languageNames from './../../const/languages';\r\nimport ApplicationError from './../../error/applicationError';\r\n\r\nconst log = debug('bi-admin-vue:store:languages');\r\n\r\nexport default {\r\n    build(Vue, LanguagesResource) {\r\n        let state = {\r\n            data: null,\r\n        };\r\n\r\n        let getters = {\r\n            availableLanguages: (state) => {\r\n                return {\r\n                    [languageCodes.ENGLISH]: {\r\n                        code: languageCodes.ENGLISH,\r\n                        name: languageNames[languageCodes.ENGLISH]\r\n                    },\r\n                    ...state.data\r\n                }\r\n            },\r\n        };\r\n\r\n        let actions = {\r\n            async getLanguages({commit, state}) {\r\n                if (!LanguagesResource) {\r\n                    throw new ApplicationError('No languages available');\r\n                }\r\n                let response = await LanguagesResource.get();\r\n                commit(types.RECEIVE_LANGUAGES, response.data);\r\n                log('Languages data loaded:', response.data);\r\n            },\r\n        };\r\n\r\n        let mutations = {\r\n            [types.RECEIVE_LANGUAGES](state, val) {\r\n                Vue.set(state, 'data', val);\r\n            },\r\n        };\r\n\r\n        return {\r\n            namespaced: true,\r\n            state,\r\n            actions,\r\n            getters,\r\n            mutations\r\n        };\r\n    }\r\n}\r\n"]}]}