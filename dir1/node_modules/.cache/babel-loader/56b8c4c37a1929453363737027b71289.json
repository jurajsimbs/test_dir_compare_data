{"remainingRequest":"C:\\work\\bi-admin-vue-new\\node_modules\\thread-loader\\dist\\cjs.js!C:\\work\\bi-admin-vue-new\\node_modules\\babel-loader\\lib\\index.js!C:\\work\\bi-admin-vue-new\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\work\\bi-admin-vue-new\\src\\store\\modules\\settings.js","dependencies":[{"path":"C:\\work\\bi-admin-vue-new\\src\\store\\modules\\settings.js","mtime":1552754725292},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nimport _regeneratorRuntime from \"C:\\\\work\\\\bi-admin-vue-new\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport debug from 'debug';\nimport * as types from '../mutation-types';\nimport ApplicationError from './../../error/applicationError';\nvar log = debug('bi-admin-vue:store:settings');\nexport default {\n  build: function build(Vue, SettingsResource) {\n    var state = {\n      data: null\n    };\n    var getters = {\n      settings: function settings(state) {\n        return state.data;\n      }\n    };\n    var actions = {\n      getSettings: function () {\n        var _getSettings = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(_ref) {\n          var commit, state, response;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  commit = _ref.commit, state = _ref.state;\n\n                  if (SettingsResource) {\n                    _context.next = 3;\n                    break;\n                  }\n\n                  throw new ApplicationError('No SettingsResource provided');\n\n                case 3:\n                  _context.next = 5;\n                  return SettingsResource.get();\n\n                case 5:\n                  response = _context.sent;\n                  commit(types.RECEIVE_SETTINGS, response.data);\n                  log('Settings data loaded:', response.data);\n\n                case 8:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        function getSettings(_x) {\n          return _getSettings.apply(this, arguments);\n        }\n\n        return getSettings;\n      }()\n    };\n\n    var mutations = _defineProperty({}, types.RECEIVE_SETTINGS, function (state, val) {\n      Vue.set(state, 'data', val);\n    });\n\n    return {\n      namespaced: true,\n      state: state,\n      actions: actions,\n      getters: getters,\n      mutations: mutations\n    };\n  }\n};",{"version":3,"sources":["C:\\work\\bi-admin-vue-new\\src\\store\\modules\\settings.js"],"names":["debug","types","ApplicationError","log","build","Vue","SettingsResource","state","data","getters","settings","actions","getSettings","commit","get","response","RECEIVE_SETTINGS","mutations","val","set","namespaced"],"mappings":"AAAA;;;;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,mBAAvB;AACA,OAAOC,gBAAP,MAA6B,gCAA7B;AAEA,IAAMC,GAAG,GAAGH,KAAK,CAAC,6BAAD,CAAjB;AAEA,eAAe;AACXI,EAAAA,KADW,iBACLC,GADK,EACAC,gBADA,EACkB;AACzB,QAAIC,KAAK,GAAG;AACRC,MAAAA,IAAI,EAAE;AADE,KAAZ;AAIA,QAAIC,OAAO,GAAG;AACVC,MAAAA,QAAQ,EAAE,kBAACH,KAAD,EAAW;AACjB,eAAOA,KAAK,CAACC,IAAb;AACH;AAHS,KAAd;AAMA,QAAIG,OAAO,GAAG;AACJC,MAAAA,WADI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACSC,kBAAAA,MADT,QACSA,MADT,EACiBN,KADjB,QACiBA,KADjB;;AAAA,sBAEDD,gBAFC;AAAA;AAAA;AAAA;;AAAA,wBAGI,IAAIJ,gBAAJ,CAAqB,8BAArB,CAHJ;;AAAA;AAAA;AAAA,yBAKeI,gBAAgB,CAACQ,GAAjB,EALf;;AAAA;AAKFC,kBAAAA,QALE;AAMNF,kBAAAA,MAAM,CAACZ,KAAK,CAACe,gBAAP,EAAyBD,QAAQ,CAACP,IAAlC,CAAN;AACAL,kBAAAA,GAAG,CAAC,uBAAD,EAA0BY,QAAQ,CAACP,IAAnC,CAAH;;AAPM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,KAAd;;AAWA,QAAIS,SAAS,uBACRhB,KAAK,CAACe,gBADE,YACgBT,KADhB,EACuBW,GADvB,EAC4B;AACjCb,MAAAA,GAAG,CAACc,GAAJ,CAAQZ,KAAR,EAAe,MAAf,EAAuBW,GAAvB;AACH,KAHQ,CAAb;;AAMA,WAAO;AACHE,MAAAA,UAAU,EAAE,IADT;AAEHb,MAAAA,KAAK,EAALA,KAFG;AAGHI,MAAAA,OAAO,EAAPA,OAHG;AAIHF,MAAAA,OAAO,EAAPA,OAJG;AAKHQ,MAAAA,SAAS,EAATA;AALG,KAAP;AAOH;AApCU,CAAf","sourcesContent":["\"use strict\";\r\nimport debug from 'debug';\r\nimport * as types from '../mutation-types';\r\nimport ApplicationError from './../../error/applicationError';\r\n\r\nconst log = debug('bi-admin-vue:store:settings');\r\n\r\nexport default {\r\n    build(Vue, SettingsResource) {\r\n        let state = {\r\n            data: null,\r\n        };\r\n\r\n        let getters = {\r\n            settings: (state) => {\r\n                return state.data;\r\n            },\r\n        };\r\n\r\n        let actions = {\r\n            async getSettings({commit, state}) {\r\n                if (!SettingsResource) {\r\n                    throw new ApplicationError('No SettingsResource provided');\r\n                }\r\n                let response = await SettingsResource.get();\r\n                commit(types.RECEIVE_SETTINGS, response.data);\r\n                log('Settings data loaded:', response.data);\r\n            },\r\n        };\r\n\r\n        let mutations = {\r\n            [types.RECEIVE_SETTINGS](state, val) {\r\n                Vue.set(state, 'data', val);\r\n            },\r\n        };\r\n\r\n        return {\r\n            namespaced: true,\r\n            state,\r\n            actions,\r\n            getters,\r\n            mutations\r\n        };\r\n    }\r\n}\r\n"]}]}