{"remainingRequest":"C:\\work\\bi-admin-vue-new\\node_modules\\thread-loader\\dist\\cjs.js!C:\\work\\bi-admin-vue-new\\node_modules\\babel-loader\\lib\\index.js!C:\\work\\bi-admin-vue-new\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\work\\bi-admin-vue-new\\src\\app\\appManager.js","dependencies":[{"path":"C:\\work\\bi-admin-vue-new\\src\\app\\appManager.js","mtime":1552754725216},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\work\\bi-admin-vue-new\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport _Object$assign from \"C:\\\\work\\\\bi-admin-vue-new\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/object/assign\";\nimport _classCallCheck from \"C:\\\\work\\\\bi-admin-vue-new\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\work\\\\bi-admin-vue-new\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"C:\\\\work\\\\bi-admin-vue-new\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\nimport debug from 'debug';\nimport Vue from 'vue';\nimport * as types from './../store/mutation-types';\nimport Events from './events';\nimport localSettings from './localSettings';\nimport ApplicationError from './../error/applicationError';\nvar log = debug('bi-admin-vue:app:manager');\n\nvar AppManager =\n/*#__PURE__*/\nfunction () {\n  function AppManager(pageDefinitions) {\n    var _this = this;\n\n    _classCallCheck(this, AppManager);\n\n    _defineProperty(this, \"onStoreMutation\", function (mutation, state) {\n      if (mutation.type === 'user/' + types.RECEIVE_USER) {\n        _this.user = mutation.payload;\n\n        _this.$emit(Events.USER.CHANGED, mutation.payload);\n      }\n\n      if (mutation.type === 'user/' + types.IS_LOGGED_IN) {\n        _this.loggedIn = mutation.payload;\n\n        if (mutation.payload === true) {\n          _this.$emit(Events.USER.LOG_IN);\n        } else {\n          _this.$emit(Events.USER.LOG_OUT);\n        }\n      }\n\n      if (mutation.type === 'settings/' + types.RECEIVE_SETTINGS) {\n        _this.settings = mutation.payload;\n\n        _this.$emit(Events.SETTINGS.CHANGED, _this.settings);\n      }\n    });\n\n    this.store = null;\n    this.router = null;\n    this.eventBus = new Vue();\n    this.pages = {};\n    pageDefinitions.map(function (page, index) {\n      var pageData = _Object$assign({\n        title: page.title || page.name || 'Page',\n        name: page.name,\n        icon: 'extension',\n        inMenu: false,\n        options: {}\n      }, page);\n\n      log('Adding page: ', pageData);\n      _this.pages[index] = pageData;\n    });\n    this.user = null;\n    this.loggedIn = false; //TODO: really needed?\n\n    this.settings = null;\n  }\n\n  _createClass(AppManager, [{\n    key: \"setRouter\",\n    value: function setRouter(router) {\n      if (this.router) {\n        throw new ApplicationError('Router already set!');\n      }\n\n      this.router = router;\n    }\n  }, {\n    key: \"setStore\",\n    value: function setStore(store) {\n      if (this.store) {\n        throw new ApplicationError('Store already set!');\n      }\n\n      this.store = store;\n      this.store.subscribe(this.onStoreMutation);\n    }\n  }, {\n    key: \"$emit\",\n    value: function $emit(eventName, value) {\n      return this.eventBus.$emit(eventName, value);\n    }\n  }, {\n    key: \"$on\",\n    value: function $on(eventName, handler) {\n      return this.eventBus.$on(eventName, handler);\n    }\n  }, {\n    key: \"$off\",\n    value: function $off(eventName, handler) {\n      return this.eventBus.$off(eventName, handler);\n    }\n  }, {\n    key: \"$once\",\n    value: function $once(eventName, handler) {\n      return this.eventBus.$once(eventName, handler);\n    }\n  }, {\n    key: \"changeDrawerVisibility\",\n    value: function changeDrawerVisibility(visible) {\n      this.$emit(Events.DRAWER.ALWAYS_VISIBLE, visible);\n      localSettings.set('drawerAlwaysVisible', visible);\n    }\n    /**\r\n     * @deprecated\r\n     * use .pages directly\r\n     */\n\n  }, {\n    key: \"getPages\",\n    value: function getPages() {\n      return this.pages;\n    }\n  }]);\n\n  return AppManager;\n}();\n\nexport { AppManager as default };",{"version":3,"sources":["C:\\work\\bi-admin-vue-new\\src\\app\\appManager.js"],"names":["debug","Vue","types","Events","localSettings","ApplicationError","log","AppManager","pageDefinitions","mutation","state","type","RECEIVE_USER","user","payload","$emit","USER","CHANGED","IS_LOGGED_IN","loggedIn","LOG_IN","LOG_OUT","RECEIVE_SETTINGS","settings","SETTINGS","store","router","eventBus","pages","map","page","index","pageData","title","name","icon","inMenu","options","subscribe","onStoreMutation","eventName","value","handler","$on","$off","$once","visible","DRAWER","ALWAYS_VISIBLE","set"],"mappings":"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","sourcesContent":["import debug from 'debug';\r\nimport Vue from 'vue';\r\nimport * as types from './../store/mutation-types';\r\nimport Events from './events';\r\nimport localSettings from './localSettings';\r\nimport ApplicationError from './../error/applicationError'\r\n\r\nconst log = debug('bi-admin-vue:app:manager');\r\n\r\nexport default class AppManager {\r\n    constructor(pageDefinitions) {\r\n\r\n        this.store    = null;\r\n        this.router   = null;\r\n        this.eventBus = new Vue();\r\n        this.pages    = {};\r\n\r\n        pageDefinitions.map((page, index) => {\r\n\r\n            let pageData = Object.assign({\r\n                title  : page.title || page.name || 'Page',\r\n                name   : page.name,\r\n                icon   : 'extension',\r\n                inMenu : false,\r\n                options: {}\r\n            }, page);\r\n\r\n            log('Adding page: ', pageData);\r\n\r\n            this.pages[index] = pageData;\r\n        });\r\n\r\n        this.user     = null;\r\n        this.loggedIn = false; //TODO: really needed?\r\n        this.settings = null;\r\n    }\r\n\r\n    setRouter(router) {\r\n        if (this.router) {\r\n            throw new ApplicationError('Router already set!');\r\n        }\r\n        this.router = router;\r\n    }\r\n\r\n    setStore(store) {\r\n\r\n        if (this.store) {\r\n            throw new ApplicationError('Store already set!');\r\n        }\r\n\r\n        this.store = store;\r\n        this.store.subscribe(this.onStoreMutation);\r\n    }\r\n\r\n    onStoreMutation = (mutation, state) => {\r\n\r\n        if (mutation.type === 'user/' + types.RECEIVE_USER) {\r\n            this.user = mutation.payload;\r\n            this.$emit(Events.USER.CHANGED, mutation.payload);\r\n        }\r\n\r\n        if (mutation.type === 'user/' + types.IS_LOGGED_IN) {\r\n            this.loggedIn = mutation.payload;\r\n            if (mutation.payload === true) {\r\n                this.$emit(Events.USER.LOG_IN);\r\n            } else {\r\n                this.$emit(Events.USER.LOG_OUT);\r\n            }\r\n        }\r\n\r\n        if (mutation.type === 'settings/' + types.RECEIVE_SETTINGS) {\r\n            this.settings = mutation.payload;\r\n            this.$emit(Events.SETTINGS.CHANGED, this.settings);\r\n        }\r\n    }\r\n\r\n    $emit(eventName, value) {\r\n        return this.eventBus.$emit(eventName, value);\r\n    }\r\n\r\n    $on(eventName, handler) {\r\n        return this.eventBus.$on(eventName, handler);\r\n    }\r\n\r\n    $off(eventName, handler) {\r\n        return this.eventBus.$off(eventName, handler);\r\n\r\n    }\r\n\r\n    $once(eventName, handler) {\r\n        return this.eventBus.$once(eventName, handler);\r\n    }\r\n\r\n    changeDrawerVisibility(visible) {\r\n        this.$emit(Events.DRAWER.ALWAYS_VISIBLE, visible)\r\n        localSettings.set('drawerAlwaysVisible', visible);\r\n    }\r\n\r\n    /**\r\n     * @deprecated\r\n     * use .pages directly\r\n     */\r\n    getPages() {\r\n        return this.pages;\r\n    }\r\n}"]}]}